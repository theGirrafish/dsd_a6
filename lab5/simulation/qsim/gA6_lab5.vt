// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2017 18:55:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gA6_lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gA6_lab5_vlg_sample_tst(
	clk,
	player_sum,
	rst,
	sum,
	turn,
	sampler_tx
);
input  clk;
input [5:0] player_sum;
input  rst;
input [5:0] sum;
input  turn;
output sampler_tx;

reg sample;
time current_time;
always @(clk or player_sum or rst or sum or turn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gA6_lab5_vlg_check_tst (
	dealer_wins,
	done,
	hit,
	led_display1,
	led_display2,
	led_display3,
	led_display4,
	player_wins,
	state_out,
	sum_out,
	sampler_rx
);
input  dealer_wins;
input  done;
input  hit;
input [6:0] led_display1;
input [6:0] led_display2;
input [6:0] led_display3;
input [6:0] led_display4;
input  player_wins;
input [1:0] state_out;
input [5:0] sum_out;
input sampler_rx;

reg  dealer_wins_expected;
reg  done_expected;
reg  hit_expected;
reg [6:0] led_display1_expected;
reg [6:0] led_display2_expected;
reg [6:0] led_display3_expected;
reg [6:0] led_display4_expected;
reg  player_wins_expected;
reg [1:0] state_out_expected;
reg [5:0] sum_out_expected;

reg  dealer_wins_prev;
reg  done_prev;
reg  hit_prev;
reg [6:0] led_display1_prev;
reg [6:0] led_display2_prev;
reg [6:0] led_display3_prev;
reg [6:0] led_display4_prev;
reg  player_wins_prev;
reg [1:0] state_out_prev;
reg [5:0] sum_out_prev;

reg  dealer_wins_expected_prev;
reg  done_expected_prev;
reg  hit_expected_prev;
reg  player_wins_expected_prev;
reg [1:0] state_out_expected_prev;
reg [5:0] sum_out_expected_prev;

reg  last_dealer_wins_exp;
reg  last_done_exp;
reg  last_hit_exp;
reg  last_player_wins_exp;
reg [1:0] last_state_out_exp;
reg [5:0] last_sum_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	dealer_wins_prev = dealer_wins;
	done_prev = done;
	hit_prev = hit;
	led_display1_prev = led_display1;
	led_display2_prev = led_display2;
	led_display3_prev = led_display3;
	led_display4_prev = led_display4;
	player_wins_prev = player_wins;
	state_out_prev = state_out;
	sum_out_prev = sum_out;
end

// update expected /o prevs

always @(trigger)
begin
	dealer_wins_expected_prev = dealer_wins_expected;
	done_expected_prev = done_expected;
	hit_expected_prev = hit_expected;
	player_wins_expected_prev = player_wins_expected;
	state_out_expected_prev = state_out_expected;
	sum_out_expected_prev = sum_out_expected;
end


// expected sum_out[ 5 ]
initial
begin
	sum_out_expected[5] = 1'bX;
end 
// expected sum_out[ 4 ]
initial
begin
	sum_out_expected[4] = 1'bX;
end 
// expected sum_out[ 3 ]
initial
begin
	sum_out_expected[3] = 1'bX;
end 
// expected sum_out[ 2 ]
initial
begin
	sum_out_expected[2] = 1'bX;
end 
// expected sum_out[ 1 ]
initial
begin
	sum_out_expected[1] = 1'bX;
end 
// expected sum_out[ 0 ]
initial
begin
	sum_out_expected[0] = 1'bX;
end 
// expected state_out[ 1 ]
initial
begin
	state_out_expected[1] = 1'bX;
end 
// expected state_out[ 0 ]
initial
begin
	state_out_expected[0] = 1'bX;
end 

// expected hit
initial
begin
	hit_expected = 1'bX;
end 

// expected done
initial
begin
	done_expected = 1'bX;
end 

// expected player_wins
initial
begin
	player_wins_expected = 1'bX;
end 

// expected dealer_wins
initial
begin
	dealer_wins_expected = 1'bX;
end 
// generate trigger
always @(dealer_wins_expected or dealer_wins or done_expected or done or hit_expected or hit or led_display1_expected or led_display1 or led_display2_expected or led_display2 or led_display3_expected or led_display3 or led_display4_expected or led_display4 or player_wins_expected or player_wins or state_out_expected or state_out or sum_out_expected or sum_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dealer_wins = %b | expected done = %b | expected hit = %b | expected led_display1 = %b | expected led_display2 = %b | expected led_display3 = %b | expected led_display4 = %b | expected player_wins = %b | expected state_out = %b | expected sum_out = %b | ",dealer_wins_expected_prev,done_expected_prev,hit_expected_prev,led_display1_expected_prev,led_display2_expected_prev,led_display3_expected_prev,led_display4_expected_prev,player_wins_expected_prev,state_out_expected_prev,sum_out_expected_prev);
	$display("| real dealer_wins = %b | real done = %b | real hit = %b | real led_display1 = %b | real led_display2 = %b | real led_display3 = %b | real led_display4 = %b | real player_wins = %b | real state_out = %b | real sum_out = %b | ",dealer_wins_prev,done_prev,hit_prev,led_display1_prev,led_display2_prev,led_display3_prev,led_display4_prev,player_wins_prev,state_out_prev,sum_out_prev);
`endif
	if (
		( dealer_wins_expected_prev !== 1'bx ) && ( dealer_wins_prev !== dealer_wins_expected_prev )
		&& ((dealer_wins_expected_prev !== last_dealer_wins_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_wins :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_wins_expected_prev);
		$display ("     Real value = %b", dealer_wins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dealer_wins_exp = dealer_wins_expected_prev;
	end
	if (
		( done_expected_prev !== 1'bx ) && ( done_prev !== done_expected_prev )
		&& ((done_expected_prev !== last_done_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_expected_prev);
		$display ("     Real value = %b", done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_done_exp = done_expected_prev;
	end
	if (
		( hit_expected_prev !== 1'bx ) && ( hit_prev !== hit_expected_prev )
		&& ((hit_expected_prev !== last_hit_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hit :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hit_expected_prev);
		$display ("     Real value = %b", hit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hit_exp = hit_expected_prev;
	end
	if (
		( player_wins_expected_prev !== 1'bx ) && ( player_wins_prev !== player_wins_expected_prev )
		&& ((player_wins_expected_prev !== last_player_wins_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_wins :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_wins_expected_prev);
		$display ("     Real value = %b", player_wins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_player_wins_exp = player_wins_expected_prev;
	end
	if (
		( state_out_expected_prev[0] !== 1'bx ) && ( state_out_prev[0] !== state_out_expected_prev[0] )
		&& ((state_out_expected_prev[0] !== last_state_out_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_out_expected_prev);
		$display ("     Real value = %b", state_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_state_out_exp[0] = state_out_expected_prev[0];
	end
	if (
		( state_out_expected_prev[1] !== 1'bx ) && ( state_out_prev[1] !== state_out_expected_prev[1] )
		&& ((state_out_expected_prev[1] !== last_state_out_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_out_expected_prev);
		$display ("     Real value = %b", state_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_state_out_exp[1] = state_out_expected_prev[1];
	end
	if (
		( sum_out_expected_prev[0] !== 1'bx ) && ( sum_out_prev[0] !== sum_out_expected_prev[0] )
		&& ((sum_out_expected_prev[0] !== last_sum_out_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_out_expected_prev);
		$display ("     Real value = %b", sum_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sum_out_exp[0] = sum_out_expected_prev[0];
	end
	if (
		( sum_out_expected_prev[1] !== 1'bx ) && ( sum_out_prev[1] !== sum_out_expected_prev[1] )
		&& ((sum_out_expected_prev[1] !== last_sum_out_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_out_expected_prev);
		$display ("     Real value = %b", sum_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sum_out_exp[1] = sum_out_expected_prev[1];
	end
	if (
		( sum_out_expected_prev[2] !== 1'bx ) && ( sum_out_prev[2] !== sum_out_expected_prev[2] )
		&& ((sum_out_expected_prev[2] !== last_sum_out_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_out_expected_prev);
		$display ("     Real value = %b", sum_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sum_out_exp[2] = sum_out_expected_prev[2];
	end
	if (
		( sum_out_expected_prev[3] !== 1'bx ) && ( sum_out_prev[3] !== sum_out_expected_prev[3] )
		&& ((sum_out_expected_prev[3] !== last_sum_out_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_out_expected_prev);
		$display ("     Real value = %b", sum_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sum_out_exp[3] = sum_out_expected_prev[3];
	end
	if (
		( sum_out_expected_prev[4] !== 1'bx ) && ( sum_out_prev[4] !== sum_out_expected_prev[4] )
		&& ((sum_out_expected_prev[4] !== last_sum_out_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_out_expected_prev);
		$display ("     Real value = %b", sum_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sum_out_exp[4] = sum_out_expected_prev[4];
	end
	if (
		( sum_out_expected_prev[5] !== 1'bx ) && ( sum_out_prev[5] !== sum_out_expected_prev[5] )
		&& ((sum_out_expected_prev[5] !== last_sum_out_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_out_expected_prev);
		$display ("     Real value = %b", sum_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sum_out_exp[5] = sum_out_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gA6_lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] player_sum;
reg rst;
reg [5:0] sum;
reg turn;
// wires                                               
wire dealer_wins;
wire done;
wire hit;
wire [6:0] led_display1;
wire [6:0] led_display2;
wire [6:0] led_display3;
wire [6:0] led_display4;
wire player_wins;
wire [1:0] state_out;
wire [5:0] sum_out;

wire sampler;                             

// assign statements (if any)                          
gA6_lab5 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dealer_wins(dealer_wins),
	.done(done),
	.hit(hit),
	.led_display1(led_display1),
	.led_display2(led_display2),
	.led_display3(led_display3),
	.led_display4(led_display4),
	.player_sum(player_sum),
	.player_wins(player_wins),
	.rst(rst),
	.state_out(state_out),
	.sum(sum),
	.sum_out(sum_out),
	.turn(turn)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #640000 1'b1;
	rst = #130000 1'b0;
end 

// turn
initial
begin
	turn = 1'b0;
	turn = #10000 1'b1;
	turn = #100000 1'b0;
	turn = #60000 1'b1;
	turn = #100000 1'b0;
	turn = #90000 1'b1;
	turn = #340000 1'b0;
	turn = #210000 1'b1;
end 
// sum[ 5 ]
initial
begin
	sum[5] = 1'b0;
end 
// sum[ 4 ]
initial
begin
	sum[4] = 1'b0;
	sum[4] = #80000 1'b1;
	sum[4] = #50000 1'b0;
	sum[4] = #100000 1'b1;
	sum[4] = #210000 1'b0;
	sum[4] = #180000 1'b1;
	sum[4] = #90000 1'b0;
	sum[4] = #150000 1'b1;
	sum[4] = #60000 1'b0;
end 
// sum[ 3 ]
initial
begin
	sum[3] = 1'b0;
	sum[3] = #30000 1'b1;
	sum[3] = #50000 1'b0;
	sum[3] = #80000 1'b1;
	sum[3] = #70000 1'b0;
	sum[3] = #210000 1'b1;
	sum[3] = #60000 1'b0;
	sum[3] = #270000 1'b1;
end 
// sum[ 2 ]
initial
begin
	sum[2] = 1'b0;
	sum[2] = #230000 1'b1;
	sum[2] = #120000 1'b0;
	sum[2] = #60000 1'b1;
	sum[2] = #30000 1'b0;
	sum[2] = #180000 1'b1;
	sum[2] = #240000 1'b0;
end 
// sum[ 1 ]
initial
begin
	sum[1] = 1'b0;
	sum[1] = #30000 1'b1;
	sum[1] = #100000 1'b0;
	sum[1] = #70000 1'b1;
	sum[1] = #90000 1'b0;
	sum[1] = #120000 1'b1;
	sum[1] = #90000 1'b0;
	sum[1] = #120000 1'b1;
	sum[1] = #30000 1'b0;
	sum[1] = #60000 1'b1;
	sum[1] = #60000 1'b0;
	sum[1] = #90000 1'b1;
	sum[1] = #30000 1'b0;
	sum[1] = #30000 1'b1;
	sum[1] = #30000 1'b0;
end 
// sum[ 0 ]
initial
begin
	sum[0] = 1'b0;
	sum[0] = #200000 1'b1;
	sum[0] = #30000 1'b0;
	sum[0] = #210000 1'b1;
	sum[0] = #180000 1'b0;
	sum[0] = #90000 1'b1;
	sum[0] = #150000 1'b0;
	sum[0] = #60000 1'b1;
end 
// player_sum[ 5 ]
initial
begin
	player_sum[5] = 1'b0;
end 
// player_sum[ 4 ]
initial
begin
	player_sum[4] = 1'b1;
	player_sum[4] = #150000 1'b0;
	player_sum[4] = #70000 1'b1;
	player_sum[4] = #460000 1'b0;
	player_sum[4] = #210000 1'b1;
end 
// player_sum[ 3 ]
initial
begin
	player_sum[3] = 1'b0;
	player_sum[3] = #420000 1'b1;
	player_sum[3] = #170000 1'b0;
	player_sum[3] = #90000 1'b1;
	player_sum[3] = #210000 1'b0;
end 
// player_sum[ 2 ]
initial
begin
	player_sum[2] = 1'b1;
	player_sum[2] = #150000 1'b0;
	player_sum[2] = #180000 1'b1;
	player_sum[2] = #90000 1'b0;
	player_sum[2] = #170000 1'b1;
	player_sum[2] = #90000 1'b0;
	player_sum[2] = #60000 1'b1;
end 
// player_sum[ 1 ]
initial
begin
	player_sum[1] = 1'b0;
	player_sum[1] = #590000 1'b1;
	player_sum[1] = #90000 1'b0;
	player_sum[1] = #60000 1'b1;
	player_sum[1] = #150000 1'b0;
end 
// player_sum[ 0 ]
initial
begin
	player_sum[0] = 1'b1;
	player_sum[0] = #150000 1'b0;
	player_sum[0] = #530000 1'b1;
	player_sum[0] = #210000 1'b0;
end 

gA6_lab5_vlg_sample_tst tb_sample (
	.clk(clk),
	.player_sum(player_sum),
	.rst(rst),
	.sum(sum),
	.turn(turn),
	.sampler_tx(sampler)
);

gA6_lab5_vlg_check_tst tb_out(
	.dealer_wins(dealer_wins),
	.done(done),
	.hit(hit),
	.led_display1(led_display1),
	.led_display2(led_display2),
	.led_display3(led_display3),
	.led_display4(led_display4),
	.player_wins(player_wins),
	.state_out(state_out),
	.sum_out(sum_out),
	.sampler_rx(sampler)
);
endmodule

