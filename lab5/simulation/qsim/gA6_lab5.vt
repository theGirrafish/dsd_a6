// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2017 19:20:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gA6_lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gA6_lab5_vlg_sample_tst(
	clk,
	hit_en,
	led_mode,
	new_en,
	rst_en,
	stay_en,
	sampler_tx
);
input  clk;
input  hit_en;
input [1:0] led_mode;
input  new_en;
input  rst_en;
input  stay_en;
output sampler_tx;

reg sample;
time current_time;
always @(clk or hit_en or led_mode or new_en or rst_en or stay_en)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gA6_lab5_vlg_check_tst (
	addr,
	computer_turn,
	d_setup,
	dealer_stack,
	empty,
	full,
	led1,
	led2,
	led3,
	led4,
	mode,
	num,
	p_sum,
	player_stack,
	player_sum,
	player_turn,
	popped,
	seed,
	state_out,
	sampler_rx
);
input [5:0] addr;
input  computer_turn;
input  d_setup;
input  dealer_stack;
input  empty;
input  full;
input [6:0] led1;
input [6:0] led2;
input [6:0] led3;
input [6:0] led4;
input [1:0] mode;
input [5:0] num;
input [5:0] p_sum;
input  player_stack;
input [5:0] player_sum;
input  player_turn;
input [5:0] popped;
input [31:0] seed;
input [3:0] state_out;
input sampler_rx;

reg [5:0] addr_expected;
reg  computer_turn_expected;
reg  d_setup_expected;
reg  dealer_stack_expected;
reg  empty_expected;
reg  full_expected;
reg [6:0] led1_expected;
reg [6:0] led2_expected;
reg [6:0] led3_expected;
reg [6:0] led4_expected;
reg [1:0] mode_expected;
reg [5:0] num_expected;
reg [5:0] p_sum_expected;
reg  player_stack_expected;
reg [5:0] player_sum_expected;
reg  player_turn_expected;
reg [5:0] popped_expected;
reg [31:0] seed_expected;
reg [3:0] state_out_expected;

reg [5:0] addr_prev;
reg  computer_turn_prev;
reg  d_setup_prev;
reg  dealer_stack_prev;
reg  empty_prev;
reg  full_prev;
reg [6:0] led1_prev;
reg [6:0] led2_prev;
reg [6:0] led3_prev;
reg [6:0] led4_prev;
reg [1:0] mode_prev;
reg [5:0] num_prev;
reg [5:0] p_sum_prev;
reg  player_stack_prev;
reg [5:0] player_sum_prev;
reg  player_turn_prev;
reg [5:0] popped_prev;
reg [31:0] seed_prev;
reg [3:0] state_out_prev;

reg [5:0] addr_expected_prev;
reg  computer_turn_expected_prev;
reg  d_setup_expected_prev;
reg  dealer_stack_expected_prev;
reg  empty_expected_prev;
reg  full_expected_prev;
reg [1:0] mode_expected_prev;
reg [5:0] num_expected_prev;
reg [5:0] p_sum_expected_prev;
reg  player_stack_expected_prev;
reg [5:0] player_sum_expected_prev;
reg  player_turn_expected_prev;
reg [5:0] popped_expected_prev;
reg [31:0] seed_expected_prev;
reg [3:0] state_out_expected_prev;

reg [5:0] last_addr_exp;
reg  last_computer_turn_exp;
reg  last_d_setup_exp;
reg  last_dealer_stack_exp;
reg  last_empty_exp;
reg  last_full_exp;
reg [1:0] last_mode_exp;
reg [5:0] last_num_exp;
reg [5:0] last_p_sum_exp;
reg  last_player_stack_exp;
reg [5:0] last_player_sum_exp;
reg  last_player_turn_exp;
reg [5:0] last_popped_exp;
reg [31:0] last_seed_exp;
reg [3:0] last_state_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	addr_prev = addr;
	computer_turn_prev = computer_turn;
	d_setup_prev = d_setup;
	dealer_stack_prev = dealer_stack;
	empty_prev = empty;
	full_prev = full;
	led1_prev = led1;
	led2_prev = led2;
	led3_prev = led3;
	led4_prev = led4;
	mode_prev = mode;
	num_prev = num;
	p_sum_prev = p_sum;
	player_stack_prev = player_stack;
	player_sum_prev = player_sum;
	player_turn_prev = player_turn;
	popped_prev = popped;
	seed_prev = seed;
	state_out_prev = state_out;
end

// update expected /o prevs

always @(trigger)
begin
	addr_expected_prev = addr_expected;
	computer_turn_expected_prev = computer_turn_expected;
	d_setup_expected_prev = d_setup_expected;
	dealer_stack_expected_prev = dealer_stack_expected;
	empty_expected_prev = empty_expected;
	full_expected_prev = full_expected;
	mode_expected_prev = mode_expected;
	num_expected_prev = num_expected;
	p_sum_expected_prev = p_sum_expected;
	player_stack_expected_prev = player_stack_expected;
	player_sum_expected_prev = player_sum_expected;
	player_turn_expected_prev = player_turn_expected;
	popped_expected_prev = popped_expected;
	seed_expected_prev = seed_expected;
	state_out_expected_prev = state_out_expected;
end



// expected empty
initial
begin
	empty_expected = 1'bX;
	empty_expected = #999000 1'b0;
end 

// expected full
initial
begin
	full_expected = 1'bX;
	full_expected = #999000 1'b0;
end 
// expected state_out[ 3 ]
initial
begin
	state_out_expected[3] = 1'bX;
end 
// expected state_out[ 2 ]
initial
begin
	state_out_expected[2] = 1'bX;
end 
// expected state_out[ 1 ]
initial
begin
	state_out_expected[1] = 1'bX;
end 
// expected state_out[ 0 ]
initial
begin
	state_out_expected[0] = 1'bX;
end 

// expected player_stack
initial
begin
	player_stack_expected = 1'bX;
end 

// expected player_turn
initial
begin
	player_turn_expected = 1'bX;
end 
// expected num[ 5 ]
initial
begin
	num_expected[5] = 1'bX;
end 
// expected num[ 4 ]
initial
begin
	num_expected[4] = 1'bX;
end 
// expected num[ 3 ]
initial
begin
	num_expected[3] = 1'bX;
end 
// expected num[ 2 ]
initial
begin
	num_expected[2] = 1'bX;
end 
// expected num[ 1 ]
initial
begin
	num_expected[1] = 1'bX;
end 
// expected num[ 0 ]
initial
begin
	num_expected[0] = 1'bX;
end 

// expected computer_turn
initial
begin
	computer_turn_expected = 1'bX;
end 

// expected d_setup
initial
begin
	d_setup_expected = 1'bX;
end 

// expected dealer_stack
initial
begin
	dealer_stack_expected = 1'bX;
end 
// expected p_sum[ 5 ]
initial
begin
	p_sum_expected[5] = 1'bX;
end 
// expected p_sum[ 4 ]
initial
begin
	p_sum_expected[4] = 1'bX;
end 
// expected p_sum[ 3 ]
initial
begin
	p_sum_expected[3] = 1'bX;
end 
// expected p_sum[ 2 ]
initial
begin
	p_sum_expected[2] = 1'bX;
end 
// expected p_sum[ 1 ]
initial
begin
	p_sum_expected[1] = 1'bX;
end 
// expected p_sum[ 0 ]
initial
begin
	p_sum_expected[0] = 1'bX;
end 
// expected player_sum[ 5 ]
initial
begin
	player_sum_expected[5] = 1'bX;
end 
// expected player_sum[ 4 ]
initial
begin
	player_sum_expected[4] = 1'bX;
end 
// expected player_sum[ 3 ]
initial
begin
	player_sum_expected[3] = 1'bX;
end 
// expected player_sum[ 2 ]
initial
begin
	player_sum_expected[2] = 1'bX;
end 
// expected player_sum[ 1 ]
initial
begin
	player_sum_expected[1] = 1'bX;
end 
// expected player_sum[ 0 ]
initial
begin
	player_sum_expected[0] = 1'bX;
end 
// expected popped[ 5 ]
initial
begin
	popped_expected[5] = 1'bX;
end 
// expected popped[ 4 ]
initial
begin
	popped_expected[4] = 1'bX;
end 
// expected popped[ 3 ]
initial
begin
	popped_expected[3] = 1'bX;
end 
// expected popped[ 2 ]
initial
begin
	popped_expected[2] = 1'bX;
end 
// expected popped[ 1 ]
initial
begin
	popped_expected[1] = 1'bX;
end 
// expected popped[ 0 ]
initial
begin
	popped_expected[0] = 1'bX;
end 
// expected addr[ 5 ]
initial
begin
	addr_expected[5] = 1'bX;
end 
// expected addr[ 4 ]
initial
begin
	addr_expected[4] = 1'bX;
end 
// expected addr[ 3 ]
initial
begin
	addr_expected[3] = 1'bX;
end 
// expected addr[ 2 ]
initial
begin
	addr_expected[2] = 1'bX;
end 
// expected addr[ 1 ]
initial
begin
	addr_expected[1] = 1'bX;
end 
// expected addr[ 0 ]
initial
begin
	addr_expected[0] = 1'bX;
end 
// expected mode[ 1 ]
initial
begin
	mode_expected[1] = 1'bX;
end 
// expected mode[ 0 ]
initial
begin
	mode_expected[0] = 1'bX;
end 
// expected seed[ 31 ]
initial
begin
	seed_expected[31] = 1'bX;
end 
// expected seed[ 30 ]
initial
begin
	seed_expected[30] = 1'bX;
end 
// expected seed[ 29 ]
initial
begin
	seed_expected[29] = 1'bX;
end 
// expected seed[ 28 ]
initial
begin
	seed_expected[28] = 1'bX;
end 
// expected seed[ 27 ]
initial
begin
	seed_expected[27] = 1'bX;
end 
// expected seed[ 26 ]
initial
begin
	seed_expected[26] = 1'bX;
end 
// expected seed[ 25 ]
initial
begin
	seed_expected[25] = 1'bX;
end 
// expected seed[ 24 ]
initial
begin
	seed_expected[24] = 1'bX;
end 
// expected seed[ 23 ]
initial
begin
	seed_expected[23] = 1'bX;
end 
// expected seed[ 22 ]
initial
begin
	seed_expected[22] = 1'bX;
end 
// expected seed[ 21 ]
initial
begin
	seed_expected[21] = 1'bX;
end 
// expected seed[ 20 ]
initial
begin
	seed_expected[20] = 1'bX;
end 
// expected seed[ 19 ]
initial
begin
	seed_expected[19] = 1'bX;
end 
// expected seed[ 18 ]
initial
begin
	seed_expected[18] = 1'bX;
end 
// expected seed[ 17 ]
initial
begin
	seed_expected[17] = 1'bX;
end 
// expected seed[ 16 ]
initial
begin
	seed_expected[16] = 1'bX;
end 
// expected seed[ 15 ]
initial
begin
	seed_expected[15] = 1'bX;
end 
// expected seed[ 14 ]
initial
begin
	seed_expected[14] = 1'bX;
end 
// expected seed[ 13 ]
initial
begin
	seed_expected[13] = 1'bX;
end 
// expected seed[ 12 ]
initial
begin
	seed_expected[12] = 1'bX;
end 
// expected seed[ 11 ]
initial
begin
	seed_expected[11] = 1'bX;
end 
// expected seed[ 10 ]
initial
begin
	seed_expected[10] = 1'bX;
end 
// expected seed[ 9 ]
initial
begin
	seed_expected[9] = 1'bX;
end 
// expected seed[ 8 ]
initial
begin
	seed_expected[8] = 1'bX;
end 
// expected seed[ 7 ]
initial
begin
	seed_expected[7] = 1'bX;
end 
// expected seed[ 6 ]
initial
begin
	seed_expected[6] = 1'bX;
end 
// expected seed[ 5 ]
initial
begin
	seed_expected[5] = 1'bX;
end 
// expected seed[ 4 ]
initial
begin
	seed_expected[4] = 1'bX;
end 
// expected seed[ 3 ]
initial
begin
	seed_expected[3] = 1'bX;
end 
// expected seed[ 2 ]
initial
begin
	seed_expected[2] = 1'bX;
end 
// expected seed[ 1 ]
initial
begin
	seed_expected[1] = 1'bX;
end 
// expected seed[ 0 ]
initial
begin
	seed_expected[0] = 1'bX;
end 
// generate trigger
always @(addr_expected or addr or computer_turn_expected or computer_turn or d_setup_expected or d_setup or dealer_stack_expected or dealer_stack or empty_expected or empty or full_expected or full or led1_expected or led1 or led2_expected or led2 or led3_expected or led3 or led4_expected or led4 or mode_expected or mode or num_expected or num or p_sum_expected or p_sum or player_stack_expected or player_stack or player_sum_expected or player_sum or player_turn_expected or player_turn or popped_expected or popped or seed_expected or seed or state_out_expected or state_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addr = %b | expected computer_turn = %b | expected d_setup = %b | expected dealer_stack = %b | expected empty = %b | expected full = %b | expected led1 = %b | expected led2 = %b | expected led3 = %b | expected led4 = %b | expected mode = %b | expected num = %b | expected p_sum = %b | expected player_stack = %b | expected player_sum = %b | expected player_turn = %b | expected popped = %b | expected seed = %b | expected state_out = %b | ",addr_expected_prev,computer_turn_expected_prev,d_setup_expected_prev,dealer_stack_expected_prev,empty_expected_prev,full_expected_prev,led1_expected_prev,led2_expected_prev,led3_expected_prev,led4_expected_prev,mode_expected_prev,num_expected_prev,p_sum_expected_prev,player_stack_expected_prev,player_sum_expected_prev,player_turn_expected_prev,popped_expected_prev,seed_expected_prev,state_out_expected_prev);
	$display("| real addr = %b | real computer_turn = %b | real d_setup = %b | real dealer_stack = %b | real empty = %b | real full = %b | real led1 = %b | real led2 = %b | real led3 = %b | real led4 = %b | real mode = %b | real num = %b | real p_sum = %b | real player_stack = %b | real player_sum = %b | real player_turn = %b | real popped = %b | real seed = %b | real state_out = %b | ",addr_prev,computer_turn_prev,d_setup_prev,dealer_stack_prev,empty_prev,full_prev,led1_prev,led2_prev,led3_prev,led4_prev,mode_prev,num_prev,p_sum_prev,player_stack_prev,player_sum_prev,player_turn_prev,popped_prev,seed_prev,state_out_prev);
`endif
	if (
		( addr_expected_prev[0] !== 1'bx ) && ( addr_prev[0] !== addr_expected_prev[0] )
		&& ((addr_expected_prev[0] !== last_addr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[0] = addr_expected_prev[0];
	end
	if (
		( addr_expected_prev[1] !== 1'bx ) && ( addr_prev[1] !== addr_expected_prev[1] )
		&& ((addr_expected_prev[1] !== last_addr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[1] = addr_expected_prev[1];
	end
	if (
		( addr_expected_prev[2] !== 1'bx ) && ( addr_prev[2] !== addr_expected_prev[2] )
		&& ((addr_expected_prev[2] !== last_addr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[2] = addr_expected_prev[2];
	end
	if (
		( addr_expected_prev[3] !== 1'bx ) && ( addr_prev[3] !== addr_expected_prev[3] )
		&& ((addr_expected_prev[3] !== last_addr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[3] = addr_expected_prev[3];
	end
	if (
		( addr_expected_prev[4] !== 1'bx ) && ( addr_prev[4] !== addr_expected_prev[4] )
		&& ((addr_expected_prev[4] !== last_addr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[4] = addr_expected_prev[4];
	end
	if (
		( addr_expected_prev[5] !== 1'bx ) && ( addr_prev[5] !== addr_expected_prev[5] )
		&& ((addr_expected_prev[5] !== last_addr_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[5] = addr_expected_prev[5];
	end
	if (
		( computer_turn_expected_prev !== 1'bx ) && ( computer_turn_prev !== computer_turn_expected_prev )
		&& ((computer_turn_expected_prev !== last_computer_turn_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port computer_turn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", computer_turn_expected_prev);
		$display ("     Real value = %b", computer_turn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_computer_turn_exp = computer_turn_expected_prev;
	end
	if (
		( d_setup_expected_prev !== 1'bx ) && ( d_setup_prev !== d_setup_expected_prev )
		&& ((d_setup_expected_prev !== last_d_setup_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_setup :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_setup_expected_prev);
		$display ("     Real value = %b", d_setup_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d_setup_exp = d_setup_expected_prev;
	end
	if (
		( dealer_stack_expected_prev !== 1'bx ) && ( dealer_stack_prev !== dealer_stack_expected_prev )
		&& ((dealer_stack_expected_prev !== last_dealer_stack_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_stack :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_stack_expected_prev);
		$display ("     Real value = %b", dealer_stack_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dealer_stack_exp = dealer_stack_expected_prev;
	end
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_full_exp = full_expected_prev;
	end
	if (
		( mode_expected_prev[0] !== 1'bx ) && ( mode_prev[0] !== mode_expected_prev[0] )
		&& ((mode_expected_prev[0] !== last_mode_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode_expected_prev);
		$display ("     Real value = %b", mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_mode_exp[0] = mode_expected_prev[0];
	end
	if (
		( mode_expected_prev[1] !== 1'bx ) && ( mode_prev[1] !== mode_expected_prev[1] )
		&& ((mode_expected_prev[1] !== last_mode_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode_expected_prev);
		$display ("     Real value = %b", mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_mode_exp[1] = mode_expected_prev[1];
	end
	if (
		( num_expected_prev[0] !== 1'bx ) && ( num_prev[0] !== num_expected_prev[0] )
		&& ((num_expected_prev[0] !== last_num_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_num_exp[0] = num_expected_prev[0];
	end
	if (
		( num_expected_prev[1] !== 1'bx ) && ( num_prev[1] !== num_expected_prev[1] )
		&& ((num_expected_prev[1] !== last_num_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_num_exp[1] = num_expected_prev[1];
	end
	if (
		( num_expected_prev[2] !== 1'bx ) && ( num_prev[2] !== num_expected_prev[2] )
		&& ((num_expected_prev[2] !== last_num_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_num_exp[2] = num_expected_prev[2];
	end
	if (
		( num_expected_prev[3] !== 1'bx ) && ( num_prev[3] !== num_expected_prev[3] )
		&& ((num_expected_prev[3] !== last_num_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_num_exp[3] = num_expected_prev[3];
	end
	if (
		( num_expected_prev[4] !== 1'bx ) && ( num_prev[4] !== num_expected_prev[4] )
		&& ((num_expected_prev[4] !== last_num_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_num_exp[4] = num_expected_prev[4];
	end
	if (
		( num_expected_prev[5] !== 1'bx ) && ( num_prev[5] !== num_expected_prev[5] )
		&& ((num_expected_prev[5] !== last_num_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_num_exp[5] = num_expected_prev[5];
	end
	if (
		( p_sum_expected_prev[0] !== 1'bx ) && ( p_sum_prev[0] !== p_sum_expected_prev[0] )
		&& ((p_sum_expected_prev[0] !== last_p_sum_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_p_sum_exp[0] = p_sum_expected_prev[0];
	end
	if (
		( p_sum_expected_prev[1] !== 1'bx ) && ( p_sum_prev[1] !== p_sum_expected_prev[1] )
		&& ((p_sum_expected_prev[1] !== last_p_sum_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_p_sum_exp[1] = p_sum_expected_prev[1];
	end
	if (
		( p_sum_expected_prev[2] !== 1'bx ) && ( p_sum_prev[2] !== p_sum_expected_prev[2] )
		&& ((p_sum_expected_prev[2] !== last_p_sum_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_p_sum_exp[2] = p_sum_expected_prev[2];
	end
	if (
		( p_sum_expected_prev[3] !== 1'bx ) && ( p_sum_prev[3] !== p_sum_expected_prev[3] )
		&& ((p_sum_expected_prev[3] !== last_p_sum_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_p_sum_exp[3] = p_sum_expected_prev[3];
	end
	if (
		( p_sum_expected_prev[4] !== 1'bx ) && ( p_sum_prev[4] !== p_sum_expected_prev[4] )
		&& ((p_sum_expected_prev[4] !== last_p_sum_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_p_sum_exp[4] = p_sum_expected_prev[4];
	end
	if (
		( p_sum_expected_prev[5] !== 1'bx ) && ( p_sum_prev[5] !== p_sum_expected_prev[5] )
		&& ((p_sum_expected_prev[5] !== last_p_sum_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_p_sum_exp[5] = p_sum_expected_prev[5];
	end
	if (
		( player_stack_expected_prev !== 1'bx ) && ( player_stack_prev !== player_stack_expected_prev )
		&& ((player_stack_expected_prev !== last_player_stack_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_stack :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_stack_expected_prev);
		$display ("     Real value = %b", player_stack_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_player_stack_exp = player_stack_expected_prev;
	end
	if (
		( player_sum_expected_prev[0] !== 1'bx ) && ( player_sum_prev[0] !== player_sum_expected_prev[0] )
		&& ((player_sum_expected_prev[0] !== last_player_sum_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_sum_expected_prev);
		$display ("     Real value = %b", player_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_player_sum_exp[0] = player_sum_expected_prev[0];
	end
	if (
		( player_sum_expected_prev[1] !== 1'bx ) && ( player_sum_prev[1] !== player_sum_expected_prev[1] )
		&& ((player_sum_expected_prev[1] !== last_player_sum_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_sum_expected_prev);
		$display ("     Real value = %b", player_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_player_sum_exp[1] = player_sum_expected_prev[1];
	end
	if (
		( player_sum_expected_prev[2] !== 1'bx ) && ( player_sum_prev[2] !== player_sum_expected_prev[2] )
		&& ((player_sum_expected_prev[2] !== last_player_sum_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_sum_expected_prev);
		$display ("     Real value = %b", player_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_player_sum_exp[2] = player_sum_expected_prev[2];
	end
	if (
		( player_sum_expected_prev[3] !== 1'bx ) && ( player_sum_prev[3] !== player_sum_expected_prev[3] )
		&& ((player_sum_expected_prev[3] !== last_player_sum_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_sum_expected_prev);
		$display ("     Real value = %b", player_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_player_sum_exp[3] = player_sum_expected_prev[3];
	end
	if (
		( player_sum_expected_prev[4] !== 1'bx ) && ( player_sum_prev[4] !== player_sum_expected_prev[4] )
		&& ((player_sum_expected_prev[4] !== last_player_sum_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_sum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_sum_expected_prev);
		$display ("     Real value = %b", player_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_player_sum_exp[4] = player_sum_expected_prev[4];
	end
	if (
		( player_sum_expected_prev[5] !== 1'bx ) && ( player_sum_prev[5] !== player_sum_expected_prev[5] )
		&& ((player_sum_expected_prev[5] !== last_player_sum_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_sum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_sum_expected_prev);
		$display ("     Real value = %b", player_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_player_sum_exp[5] = player_sum_expected_prev[5];
	end
	if (
		( player_turn_expected_prev !== 1'bx ) && ( player_turn_prev !== player_turn_expected_prev )
		&& ((player_turn_expected_prev !== last_player_turn_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_turn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_turn_expected_prev);
		$display ("     Real value = %b", player_turn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_player_turn_exp = player_turn_expected_prev;
	end
	if (
		( popped_expected_prev[0] !== 1'bx ) && ( popped_prev[0] !== popped_expected_prev[0] )
		&& ((popped_expected_prev[0] !== last_popped_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port popped[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", popped_expected_prev);
		$display ("     Real value = %b", popped_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_popped_exp[0] = popped_expected_prev[0];
	end
	if (
		( popped_expected_prev[1] !== 1'bx ) && ( popped_prev[1] !== popped_expected_prev[1] )
		&& ((popped_expected_prev[1] !== last_popped_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port popped[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", popped_expected_prev);
		$display ("     Real value = %b", popped_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_popped_exp[1] = popped_expected_prev[1];
	end
	if (
		( popped_expected_prev[2] !== 1'bx ) && ( popped_prev[2] !== popped_expected_prev[2] )
		&& ((popped_expected_prev[2] !== last_popped_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port popped[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", popped_expected_prev);
		$display ("     Real value = %b", popped_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_popped_exp[2] = popped_expected_prev[2];
	end
	if (
		( popped_expected_prev[3] !== 1'bx ) && ( popped_prev[3] !== popped_expected_prev[3] )
		&& ((popped_expected_prev[3] !== last_popped_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port popped[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", popped_expected_prev);
		$display ("     Real value = %b", popped_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_popped_exp[3] = popped_expected_prev[3];
	end
	if (
		( popped_expected_prev[4] !== 1'bx ) && ( popped_prev[4] !== popped_expected_prev[4] )
		&& ((popped_expected_prev[4] !== last_popped_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port popped[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", popped_expected_prev);
		$display ("     Real value = %b", popped_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_popped_exp[4] = popped_expected_prev[4];
	end
	if (
		( popped_expected_prev[5] !== 1'bx ) && ( popped_prev[5] !== popped_expected_prev[5] )
		&& ((popped_expected_prev[5] !== last_popped_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port popped[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", popped_expected_prev);
		$display ("     Real value = %b", popped_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_popped_exp[5] = popped_expected_prev[5];
	end
	if (
		( seed_expected_prev[0] !== 1'bx ) && ( seed_prev[0] !== seed_expected_prev[0] )
		&& ((seed_expected_prev[0] !== last_seed_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[0] = seed_expected_prev[0];
	end
	if (
		( seed_expected_prev[1] !== 1'bx ) && ( seed_prev[1] !== seed_expected_prev[1] )
		&& ((seed_expected_prev[1] !== last_seed_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[1] = seed_expected_prev[1];
	end
	if (
		( seed_expected_prev[2] !== 1'bx ) && ( seed_prev[2] !== seed_expected_prev[2] )
		&& ((seed_expected_prev[2] !== last_seed_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[2] = seed_expected_prev[2];
	end
	if (
		( seed_expected_prev[3] !== 1'bx ) && ( seed_prev[3] !== seed_expected_prev[3] )
		&& ((seed_expected_prev[3] !== last_seed_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[3] = seed_expected_prev[3];
	end
	if (
		( seed_expected_prev[4] !== 1'bx ) && ( seed_prev[4] !== seed_expected_prev[4] )
		&& ((seed_expected_prev[4] !== last_seed_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[4] = seed_expected_prev[4];
	end
	if (
		( seed_expected_prev[5] !== 1'bx ) && ( seed_prev[5] !== seed_expected_prev[5] )
		&& ((seed_expected_prev[5] !== last_seed_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[5] = seed_expected_prev[5];
	end
	if (
		( seed_expected_prev[6] !== 1'bx ) && ( seed_prev[6] !== seed_expected_prev[6] )
		&& ((seed_expected_prev[6] !== last_seed_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[6] = seed_expected_prev[6];
	end
	if (
		( seed_expected_prev[7] !== 1'bx ) && ( seed_prev[7] !== seed_expected_prev[7] )
		&& ((seed_expected_prev[7] !== last_seed_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[7] = seed_expected_prev[7];
	end
	if (
		( seed_expected_prev[8] !== 1'bx ) && ( seed_prev[8] !== seed_expected_prev[8] )
		&& ((seed_expected_prev[8] !== last_seed_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[8] = seed_expected_prev[8];
	end
	if (
		( seed_expected_prev[9] !== 1'bx ) && ( seed_prev[9] !== seed_expected_prev[9] )
		&& ((seed_expected_prev[9] !== last_seed_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[9] = seed_expected_prev[9];
	end
	if (
		( seed_expected_prev[10] !== 1'bx ) && ( seed_prev[10] !== seed_expected_prev[10] )
		&& ((seed_expected_prev[10] !== last_seed_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[10] = seed_expected_prev[10];
	end
	if (
		( seed_expected_prev[11] !== 1'bx ) && ( seed_prev[11] !== seed_expected_prev[11] )
		&& ((seed_expected_prev[11] !== last_seed_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[11] = seed_expected_prev[11];
	end
	if (
		( seed_expected_prev[12] !== 1'bx ) && ( seed_prev[12] !== seed_expected_prev[12] )
		&& ((seed_expected_prev[12] !== last_seed_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[12] = seed_expected_prev[12];
	end
	if (
		( seed_expected_prev[13] !== 1'bx ) && ( seed_prev[13] !== seed_expected_prev[13] )
		&& ((seed_expected_prev[13] !== last_seed_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[13] = seed_expected_prev[13];
	end
	if (
		( seed_expected_prev[14] !== 1'bx ) && ( seed_prev[14] !== seed_expected_prev[14] )
		&& ((seed_expected_prev[14] !== last_seed_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[14] = seed_expected_prev[14];
	end
	if (
		( seed_expected_prev[15] !== 1'bx ) && ( seed_prev[15] !== seed_expected_prev[15] )
		&& ((seed_expected_prev[15] !== last_seed_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[15] = seed_expected_prev[15];
	end
	if (
		( seed_expected_prev[16] !== 1'bx ) && ( seed_prev[16] !== seed_expected_prev[16] )
		&& ((seed_expected_prev[16] !== last_seed_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[16] = seed_expected_prev[16];
	end
	if (
		( seed_expected_prev[17] !== 1'bx ) && ( seed_prev[17] !== seed_expected_prev[17] )
		&& ((seed_expected_prev[17] !== last_seed_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[17] = seed_expected_prev[17];
	end
	if (
		( seed_expected_prev[18] !== 1'bx ) && ( seed_prev[18] !== seed_expected_prev[18] )
		&& ((seed_expected_prev[18] !== last_seed_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[18] = seed_expected_prev[18];
	end
	if (
		( seed_expected_prev[19] !== 1'bx ) && ( seed_prev[19] !== seed_expected_prev[19] )
		&& ((seed_expected_prev[19] !== last_seed_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[19] = seed_expected_prev[19];
	end
	if (
		( seed_expected_prev[20] !== 1'bx ) && ( seed_prev[20] !== seed_expected_prev[20] )
		&& ((seed_expected_prev[20] !== last_seed_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[20] = seed_expected_prev[20];
	end
	if (
		( seed_expected_prev[21] !== 1'bx ) && ( seed_prev[21] !== seed_expected_prev[21] )
		&& ((seed_expected_prev[21] !== last_seed_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[21] = seed_expected_prev[21];
	end
	if (
		( seed_expected_prev[22] !== 1'bx ) && ( seed_prev[22] !== seed_expected_prev[22] )
		&& ((seed_expected_prev[22] !== last_seed_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[22] = seed_expected_prev[22];
	end
	if (
		( seed_expected_prev[23] !== 1'bx ) && ( seed_prev[23] !== seed_expected_prev[23] )
		&& ((seed_expected_prev[23] !== last_seed_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[23] = seed_expected_prev[23];
	end
	if (
		( seed_expected_prev[24] !== 1'bx ) && ( seed_prev[24] !== seed_expected_prev[24] )
		&& ((seed_expected_prev[24] !== last_seed_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[24] = seed_expected_prev[24];
	end
	if (
		( seed_expected_prev[25] !== 1'bx ) && ( seed_prev[25] !== seed_expected_prev[25] )
		&& ((seed_expected_prev[25] !== last_seed_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[25] = seed_expected_prev[25];
	end
	if (
		( seed_expected_prev[26] !== 1'bx ) && ( seed_prev[26] !== seed_expected_prev[26] )
		&& ((seed_expected_prev[26] !== last_seed_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[26] = seed_expected_prev[26];
	end
	if (
		( seed_expected_prev[27] !== 1'bx ) && ( seed_prev[27] !== seed_expected_prev[27] )
		&& ((seed_expected_prev[27] !== last_seed_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[27] = seed_expected_prev[27];
	end
	if (
		( seed_expected_prev[28] !== 1'bx ) && ( seed_prev[28] !== seed_expected_prev[28] )
		&& ((seed_expected_prev[28] !== last_seed_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[28] = seed_expected_prev[28];
	end
	if (
		( seed_expected_prev[29] !== 1'bx ) && ( seed_prev[29] !== seed_expected_prev[29] )
		&& ((seed_expected_prev[29] !== last_seed_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[29] = seed_expected_prev[29];
	end
	if (
		( seed_expected_prev[30] !== 1'bx ) && ( seed_prev[30] !== seed_expected_prev[30] )
		&& ((seed_expected_prev[30] !== last_seed_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[30] = seed_expected_prev[30];
	end
	if (
		( seed_expected_prev[31] !== 1'bx ) && ( seed_prev[31] !== seed_expected_prev[31] )
		&& ((seed_expected_prev[31] !== last_seed_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seed[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seed_expected_prev);
		$display ("     Real value = %b", seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seed_exp[31] = seed_expected_prev[31];
	end
	if (
		( state_out_expected_prev[0] !== 1'bx ) && ( state_out_prev[0] !== state_out_expected_prev[0] )
		&& ((state_out_expected_prev[0] !== last_state_out_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_out_expected_prev);
		$display ("     Real value = %b", state_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_state_out_exp[0] = state_out_expected_prev[0];
	end
	if (
		( state_out_expected_prev[1] !== 1'bx ) && ( state_out_prev[1] !== state_out_expected_prev[1] )
		&& ((state_out_expected_prev[1] !== last_state_out_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_out_expected_prev);
		$display ("     Real value = %b", state_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_state_out_exp[1] = state_out_expected_prev[1];
	end
	if (
		( state_out_expected_prev[2] !== 1'bx ) && ( state_out_prev[2] !== state_out_expected_prev[2] )
		&& ((state_out_expected_prev[2] !== last_state_out_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_out_expected_prev);
		$display ("     Real value = %b", state_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_state_out_exp[2] = state_out_expected_prev[2];
	end
	if (
		( state_out_expected_prev[3] !== 1'bx ) && ( state_out_prev[3] !== state_out_expected_prev[3] )
		&& ((state_out_expected_prev[3] !== last_state_out_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_out_expected_prev);
		$display ("     Real value = %b", state_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_state_out_exp[3] = state_out_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gA6_lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg hit_en;
reg [1:0] led_mode;
reg new_en;
reg rst_en;
reg stay_en;
// wires                                               
wire [5:0] addr;
wire computer_turn;
wire d_setup;
wire dealer_stack;
wire empty;
wire full;
wire [6:0] led1;
wire [6:0] led2;
wire [6:0] led3;
wire [6:0] led4;
wire [1:0] mode;
wire [5:0] num;
wire [5:0] p_sum;
wire player_stack;
wire [5:0] player_sum;
wire player_turn;
wire [5:0] popped;
wire [31:0] seed;
wire [3:0] state_out;

wire sampler;                             

// assign statements (if any)                          
gA6_lab5 i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clk(clk),
	.computer_turn(computer_turn),
	.d_setup(d_setup),
	.dealer_stack(dealer_stack),
	.empty(empty),
	.full(full),
	.hit_en(hit_en),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.led4(led4),
	.led_mode(led_mode),
	.mode(mode),
	.new_en(new_en),
	.num(num),
	.p_sum(p_sum),
	.player_stack(player_stack),
	.player_sum(player_sum),
	.player_turn(player_turn),
	.popped(popped),
	.rst_en(rst_en),
	.seed(seed),
	.state_out(state_out),
	.stay_en(stay_en)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// rst_en
initial
begin
	rst_en = 1'b0;
end 

// hit_en
initial
begin
	hit_en = 1'b0;
end 

// stay_en
initial
begin
	stay_en = 1'b0;
end 

// new_en
initial
begin
	new_en = 1'b0;
	new_en = #160000 1'b1;
	new_en = #280000 1'b0;
end 
// led_mode[ 1 ]
initial
begin
	led_mode[1] = 1'b0;
end 
// led_mode[ 0 ]
initial
begin
	led_mode[0] = 1'b0;
end 

gA6_lab5_vlg_sample_tst tb_sample (
	.clk(clk),
	.hit_en(hit_en),
	.led_mode(led_mode),
	.new_en(new_en),
	.rst_en(rst_en),
	.stay_en(stay_en),
	.sampler_tx(sampler)
);

gA6_lab5_vlg_check_tst tb_out(
	.addr(addr),
	.computer_turn(computer_turn),
	.d_setup(d_setup),
	.dealer_stack(dealer_stack),
	.empty(empty),
	.full(full),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.led4(led4),
	.mode(mode),
	.num(num),
	.p_sum(p_sum),
	.player_stack(player_stack),
	.player_sum(player_sum),
	.player_turn(player_turn),
	.popped(popped),
	.seed(seed),
	.state_out(state_out),
	.sampler_rx(sampler)
);
endmodule

