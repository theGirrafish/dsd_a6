// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2017 21:24:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gA6_lab4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gA6_lab4_vlg_sample_tst(
	clk,
	hand_sum,
	legal_num,
	new_card,
	request_deal,
	rst,
	sampler_tx
);
input  clk;
input [5:0] hand_sum;
input  legal_num;
input [5:0] new_card;
input  request_deal;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or hand_sum or legal_num or new_card or request_deal or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gA6_lab4_vlg_check_tst (
	ace_out,
	fsm_state,
	legal_play,
	out_1,
	out_2,
	out_3,
	out_4,
	out_5,
	rand_enable,
	stack_enable,
	sampler_rx
);
input  ace_out;
input [1:0] fsm_state;
input  legal_play;
input [5:0] out_1;
input [5:0] out_2;
input [5:0] out_3;
input  out_4;
input  out_5;
input  rand_enable;
input  stack_enable;
input sampler_rx;

reg  ace_out_expected;
reg [1:0] fsm_state_expected;
reg  legal_play_expected;
reg [5:0] out_1_expected;
reg [5:0] out_2_expected;
reg [5:0] out_3_expected;
reg  out_4_expected;
reg  out_5_expected;
reg  rand_enable_expected;
reg  stack_enable_expected;

reg  ace_out_prev;
reg [1:0] fsm_state_prev;
reg  legal_play_prev;
reg [5:0] out_1_prev;
reg [5:0] out_2_prev;
reg [5:0] out_3_prev;
reg  out_4_prev;
reg  out_5_prev;
reg  rand_enable_prev;
reg  stack_enable_prev;

reg [1:0] fsm_state_expected_prev;
reg  rand_enable_expected_prev;
reg  stack_enable_expected_prev;

reg [1:0] last_fsm_state_exp;
reg  last_rand_enable_exp;
reg  last_stack_enable_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	ace_out_prev = ace_out;
	fsm_state_prev = fsm_state;
	legal_play_prev = legal_play;
	out_1_prev = out_1;
	out_2_prev = out_2;
	out_3_prev = out_3;
	out_4_prev = out_4;
	out_5_prev = out_5;
	rand_enable_prev = rand_enable;
	stack_enable_prev = stack_enable;
end

// update expected /o prevs

always @(trigger)
begin
	fsm_state_expected_prev = fsm_state_expected;
	rand_enable_expected_prev = rand_enable_expected;
	stack_enable_expected_prev = stack_enable_expected;
end



// expected rand_enable
initial
begin
	rand_enable_expected = 1'bX;
end 

// expected stack_enable
initial
begin
	stack_enable_expected = 1'bX;
end 
// expected fsm_state[ 1 ]
initial
begin
	fsm_state_expected[1] = 1'bX;
end 
// expected fsm_state[ 0 ]
initial
begin
	fsm_state_expected[0] = 1'bX;
end 
// generate trigger
always @(ace_out_expected or ace_out or fsm_state_expected or fsm_state or legal_play_expected or legal_play or out_1_expected or out_1 or out_2_expected or out_2 or out_3_expected or out_3 or out_4_expected or out_4 or out_5_expected or out_5 or rand_enable_expected or rand_enable or stack_enable_expected or stack_enable)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ace_out = %b | expected fsm_state = %b | expected legal_play = %b | expected out_1 = %b | expected out_2 = %b | expected out_3 = %b | expected out_4 = %b | expected out_5 = %b | expected rand_enable = %b | expected stack_enable = %b | ",ace_out_expected_prev,fsm_state_expected_prev,legal_play_expected_prev,out_1_expected_prev,out_2_expected_prev,out_3_expected_prev,out_4_expected_prev,out_5_expected_prev,rand_enable_expected_prev,stack_enable_expected_prev);
	$display("| real ace_out = %b | real fsm_state = %b | real legal_play = %b | real out_1 = %b | real out_2 = %b | real out_3 = %b | real out_4 = %b | real out_5 = %b | real rand_enable = %b | real stack_enable = %b | ",ace_out_prev,fsm_state_prev,legal_play_prev,out_1_prev,out_2_prev,out_3_prev,out_4_prev,out_5_prev,rand_enable_prev,stack_enable_prev);
`endif
	if (
		( fsm_state_expected_prev[0] !== 1'bx ) && ( fsm_state_prev[0] !== fsm_state_expected_prev[0] )
		&& ((fsm_state_expected_prev[0] !== last_fsm_state_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_state_expected_prev);
		$display ("     Real value = %b", fsm_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fsm_state_exp[0] = fsm_state_expected_prev[0];
	end
	if (
		( fsm_state_expected_prev[1] !== 1'bx ) && ( fsm_state_prev[1] !== fsm_state_expected_prev[1] )
		&& ((fsm_state_expected_prev[1] !== last_fsm_state_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_state_expected_prev);
		$display ("     Real value = %b", fsm_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fsm_state_exp[1] = fsm_state_expected_prev[1];
	end
	if (
		( rand_enable_expected_prev !== 1'bx ) && ( rand_enable_prev !== rand_enable_expected_prev )
		&& ((rand_enable_expected_prev !== last_rand_enable_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rand_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rand_enable_expected_prev);
		$display ("     Real value = %b", rand_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_rand_enable_exp = rand_enable_expected_prev;
	end
	if (
		( stack_enable_expected_prev !== 1'bx ) && ( stack_enable_prev !== stack_enable_expected_prev )
		&& ((stack_enable_expected_prev !== last_stack_enable_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_enable_expected_prev);
		$display ("     Real value = %b", stack_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_stack_enable_exp = stack_enable_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gA6_lab4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] hand_sum;
reg legal_num;
reg [5:0] new_card;
reg request_deal;
reg rst;
// wires                                               
wire ace_out;
wire [1:0] fsm_state;
wire legal_play;
wire [5:0] out_1;
wire [5:0] out_2;
wire [5:0] out_3;
wire out_4;
wire out_5;
wire rand_enable;
wire stack_enable;

wire sampler;                             

// assign statements (if any)                          
gA6_lab4 i1 (
// port map - connection between master ports and signals/registers   
	.ace_out(ace_out),
	.clk(clk),
	.fsm_state(fsm_state),
	.hand_sum(hand_sum),
	.legal_num(legal_num),
	.legal_play(legal_play),
	.new_card(new_card),
	.out_1(out_1),
	.out_2(out_2),
	.out_3(out_3),
	.out_4(out_4),
	.out_5(out_5),
	.rand_enable(rand_enable),
	.request_deal(request_deal),
	.rst(rst),
	.stack_enable(stack_enable)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #100000 1'b1;
	rst = #20000 1'b0;
	rst = #200000 1'b1;
	rst = #20000 1'b0;
	rst = #200000 1'b1;
	rst = #30000 1'b0;
end 

// legal_num
initial
begin
	legal_num = 1'b0;
	legal_num = #10000 1'b1;
	legal_num = #350000 1'b0;
	legal_num = #110000 1'b1;
	legal_num = #330000 1'b0;
end 

// request_deal
initial
begin
	request_deal = 1'b0;
	request_deal = #50000 1'b1;
	request_deal = #250000 1'b0;
	request_deal = #200000 1'b1;
	request_deal = #420000 1'b0;
end 

gA6_lab4_vlg_sample_tst tb_sample (
	.clk(clk),
	.hand_sum(hand_sum),
	.legal_num(legal_num),
	.new_card(new_card),
	.request_deal(request_deal),
	.rst(rst),
	.sampler_tx(sampler)
);

gA6_lab4_vlg_check_tst tb_out(
	.ace_out(ace_out),
	.fsm_state(fsm_state),
	.legal_play(legal_play),
	.out_1(out_1),
	.out_2(out_2),
	.out_3(out_3),
	.out_4(out_4),
	.out_5(out_5),
	.rand_enable(rand_enable),
	.stack_enable(stack_enable),
	.sampler_rx(sampler)
);
endmodule

