// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2017 19:38:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gA6_lab4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gA6_lab4_vlg_sample_tst(
	hand_sum,
	new_card,
	sampler_tx
);
input [5:0] hand_sum;
input [5:0] new_card;
output sampler_tx;

reg sample;
time current_time;
always @(hand_sum or new_card)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gA6_lab4_vlg_check_tst (
	ace_out,
	legal_play,
	out_1,
	out_2,
	out_3,
	out_4,
	out_5,
	sampler_rx
);
input  ace_out;
input  legal_play;
input [5:0] out_1;
input [5:0] out_2;
input [5:0] out_3;
input  out_4;
input  out_5;
input sampler_rx;

reg  ace_out_expected;
reg  legal_play_expected;
reg [5:0] out_1_expected;
reg [5:0] out_2_expected;
reg [5:0] out_3_expected;
reg  out_4_expected;
reg  out_5_expected;

reg  ace_out_prev;
reg  legal_play_prev;
reg [5:0] out_1_prev;
reg [5:0] out_2_prev;
reg [5:0] out_3_prev;
reg  out_4_prev;
reg  out_5_prev;

reg  ace_out_expected_prev;
reg  legal_play_expected_prev;
reg [5:0] out_1_expected_prev;
reg [5:0] out_2_expected_prev;
reg [5:0] out_3_expected_prev;
reg  out_4_expected_prev;
reg  out_5_expected_prev;

reg  last_ace_out_exp;
reg  last_legal_play_exp;
reg [5:0] last_out_1_exp;
reg [5:0] last_out_2_exp;
reg [5:0] last_out_3_exp;
reg  last_out_4_exp;
reg  last_out_5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	ace_out_prev = ace_out;
	legal_play_prev = legal_play;
	out_1_prev = out_1;
	out_2_prev = out_2;
	out_3_prev = out_3;
	out_4_prev = out_4;
	out_5_prev = out_5;
end

// update expected /o prevs

always @(trigger)
begin
	ace_out_expected_prev = ace_out_expected;
	legal_play_expected_prev = legal_play_expected;
	out_1_expected_prev = out_1_expected;
	out_2_expected_prev = out_2_expected;
	out_3_expected_prev = out_3_expected;
	out_4_expected_prev = out_4_expected;
	out_5_expected_prev = out_5_expected;
end



// expected legal_play
initial
begin
	legal_play_expected = 1'bX;
end 

// expected ace_out
initial
begin
	ace_out_expected = 1'bX;
end 
// expected out_1[ 5 ]
initial
begin
	out_1_expected[5] = 1'bX;
end 
// expected out_1[ 4 ]
initial
begin
	out_1_expected[4] = 1'bX;
end 
// expected out_1[ 3 ]
initial
begin
	out_1_expected[3] = 1'bX;
end 
// expected out_1[ 2 ]
initial
begin
	out_1_expected[2] = 1'bX;
end 
// expected out_1[ 1 ]
initial
begin
	out_1_expected[1] = 1'bX;
end 
// expected out_1[ 0 ]
initial
begin
	out_1_expected[0] = 1'bX;
end 
// expected out_2[ 5 ]
initial
begin
	out_2_expected[5] = 1'bX;
end 
// expected out_2[ 4 ]
initial
begin
	out_2_expected[4] = 1'bX;
end 
// expected out_2[ 3 ]
initial
begin
	out_2_expected[3] = 1'bX;
end 
// expected out_2[ 2 ]
initial
begin
	out_2_expected[2] = 1'bX;
end 
// expected out_2[ 1 ]
initial
begin
	out_2_expected[1] = 1'bX;
end 
// expected out_2[ 0 ]
initial
begin
	out_2_expected[0] = 1'bX;
end 
// expected out_3[ 5 ]
initial
begin
	out_3_expected[5] = 1'bX;
end 
// expected out_3[ 4 ]
initial
begin
	out_3_expected[4] = 1'bX;
end 
// expected out_3[ 3 ]
initial
begin
	out_3_expected[3] = 1'bX;
end 
// expected out_3[ 2 ]
initial
begin
	out_3_expected[2] = 1'bX;
end 
// expected out_3[ 1 ]
initial
begin
	out_3_expected[1] = 1'bX;
end 
// expected out_3[ 0 ]
initial
begin
	out_3_expected[0] = 1'bX;
end 

// expected out_4
initial
begin
	out_4_expected = 1'bX;
end 

// expected out_5
initial
begin
	out_5_expected = 1'bX;
end 
// generate trigger
always @(ace_out_expected or ace_out or legal_play_expected or legal_play or out_1_expected or out_1 or out_2_expected or out_2 or out_3_expected or out_3 or out_4_expected or out_4 or out_5_expected or out_5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ace_out = %b | expected legal_play = %b | expected out_1 = %b | expected out_2 = %b | expected out_3 = %b | expected out_4 = %b | expected out_5 = %b | ",ace_out_expected_prev,legal_play_expected_prev,out_1_expected_prev,out_2_expected_prev,out_3_expected_prev,out_4_expected_prev,out_5_expected_prev);
	$display("| real ace_out = %b | real legal_play = %b | real out_1 = %b | real out_2 = %b | real out_3 = %b | real out_4 = %b | real out_5 = %b | ",ace_out_prev,legal_play_prev,out_1_prev,out_2_prev,out_3_prev,out_4_prev,out_5_prev);
`endif
	if (
		( ace_out_expected_prev !== 1'bx ) && ( ace_out_prev !== ace_out_expected_prev )
		&& ((ace_out_expected_prev !== last_ace_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ace_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ace_out_expected_prev);
		$display ("     Real value = %b", ace_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ace_out_exp = ace_out_expected_prev;
	end
	if (
		( legal_play_expected_prev !== 1'bx ) && ( legal_play_prev !== legal_play_expected_prev )
		&& ((legal_play_expected_prev !== last_legal_play_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port legal_play :: @time = %t",  $realtime);
		$display ("     Expected value = %b", legal_play_expected_prev);
		$display ("     Real value = %b", legal_play_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_legal_play_exp = legal_play_expected_prev;
	end
	if (
		( out_1_expected_prev[0] !== 1'bx ) && ( out_1_prev[0] !== out_1_expected_prev[0] )
		&& ((out_1_expected_prev[0] !== last_out_1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_1_expected_prev);
		$display ("     Real value = %b", out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_1_exp[0] = out_1_expected_prev[0];
	end
	if (
		( out_1_expected_prev[1] !== 1'bx ) && ( out_1_prev[1] !== out_1_expected_prev[1] )
		&& ((out_1_expected_prev[1] !== last_out_1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_1_expected_prev);
		$display ("     Real value = %b", out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_1_exp[1] = out_1_expected_prev[1];
	end
	if (
		( out_1_expected_prev[2] !== 1'bx ) && ( out_1_prev[2] !== out_1_expected_prev[2] )
		&& ((out_1_expected_prev[2] !== last_out_1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_1_expected_prev);
		$display ("     Real value = %b", out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_1_exp[2] = out_1_expected_prev[2];
	end
	if (
		( out_1_expected_prev[3] !== 1'bx ) && ( out_1_prev[3] !== out_1_expected_prev[3] )
		&& ((out_1_expected_prev[3] !== last_out_1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_1_expected_prev);
		$display ("     Real value = %b", out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_1_exp[3] = out_1_expected_prev[3];
	end
	if (
		( out_1_expected_prev[4] !== 1'bx ) && ( out_1_prev[4] !== out_1_expected_prev[4] )
		&& ((out_1_expected_prev[4] !== last_out_1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_1_expected_prev);
		$display ("     Real value = %b", out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_1_exp[4] = out_1_expected_prev[4];
	end
	if (
		( out_1_expected_prev[5] !== 1'bx ) && ( out_1_prev[5] !== out_1_expected_prev[5] )
		&& ((out_1_expected_prev[5] !== last_out_1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_1_expected_prev);
		$display ("     Real value = %b", out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_1_exp[5] = out_1_expected_prev[5];
	end
	if (
		( out_2_expected_prev[0] !== 1'bx ) && ( out_2_prev[0] !== out_2_expected_prev[0] )
		&& ((out_2_expected_prev[0] !== last_out_2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_2_expected_prev);
		$display ("     Real value = %b", out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_2_exp[0] = out_2_expected_prev[0];
	end
	if (
		( out_2_expected_prev[1] !== 1'bx ) && ( out_2_prev[1] !== out_2_expected_prev[1] )
		&& ((out_2_expected_prev[1] !== last_out_2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_2_expected_prev);
		$display ("     Real value = %b", out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_2_exp[1] = out_2_expected_prev[1];
	end
	if (
		( out_2_expected_prev[2] !== 1'bx ) && ( out_2_prev[2] !== out_2_expected_prev[2] )
		&& ((out_2_expected_prev[2] !== last_out_2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_2_expected_prev);
		$display ("     Real value = %b", out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_2_exp[2] = out_2_expected_prev[2];
	end
	if (
		( out_2_expected_prev[3] !== 1'bx ) && ( out_2_prev[3] !== out_2_expected_prev[3] )
		&& ((out_2_expected_prev[3] !== last_out_2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_2_expected_prev);
		$display ("     Real value = %b", out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_2_exp[3] = out_2_expected_prev[3];
	end
	if (
		( out_2_expected_prev[4] !== 1'bx ) && ( out_2_prev[4] !== out_2_expected_prev[4] )
		&& ((out_2_expected_prev[4] !== last_out_2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_2_expected_prev);
		$display ("     Real value = %b", out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_2_exp[4] = out_2_expected_prev[4];
	end
	if (
		( out_2_expected_prev[5] !== 1'bx ) && ( out_2_prev[5] !== out_2_expected_prev[5] )
		&& ((out_2_expected_prev[5] !== last_out_2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_2_expected_prev);
		$display ("     Real value = %b", out_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_2_exp[5] = out_2_expected_prev[5];
	end
	if (
		( out_3_expected_prev[0] !== 1'bx ) && ( out_3_prev[0] !== out_3_expected_prev[0] )
		&& ((out_3_expected_prev[0] !== last_out_3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_3_expected_prev);
		$display ("     Real value = %b", out_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_3_exp[0] = out_3_expected_prev[0];
	end
	if (
		( out_3_expected_prev[1] !== 1'bx ) && ( out_3_prev[1] !== out_3_expected_prev[1] )
		&& ((out_3_expected_prev[1] !== last_out_3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_3_expected_prev);
		$display ("     Real value = %b", out_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_3_exp[1] = out_3_expected_prev[1];
	end
	if (
		( out_3_expected_prev[2] !== 1'bx ) && ( out_3_prev[2] !== out_3_expected_prev[2] )
		&& ((out_3_expected_prev[2] !== last_out_3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_3_expected_prev);
		$display ("     Real value = %b", out_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_3_exp[2] = out_3_expected_prev[2];
	end
	if (
		( out_3_expected_prev[3] !== 1'bx ) && ( out_3_prev[3] !== out_3_expected_prev[3] )
		&& ((out_3_expected_prev[3] !== last_out_3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_3_expected_prev);
		$display ("     Real value = %b", out_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_3_exp[3] = out_3_expected_prev[3];
	end
	if (
		( out_3_expected_prev[4] !== 1'bx ) && ( out_3_prev[4] !== out_3_expected_prev[4] )
		&& ((out_3_expected_prev[4] !== last_out_3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_3_expected_prev);
		$display ("     Real value = %b", out_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_3_exp[4] = out_3_expected_prev[4];
	end
	if (
		( out_3_expected_prev[5] !== 1'bx ) && ( out_3_prev[5] !== out_3_expected_prev[5] )
		&& ((out_3_expected_prev[5] !== last_out_3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_3_expected_prev);
		$display ("     Real value = %b", out_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_3_exp[5] = out_3_expected_prev[5];
	end
	if (
		( out_4_expected_prev !== 1'bx ) && ( out_4_prev !== out_4_expected_prev )
		&& ((out_4_expected_prev !== last_out_4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_4_expected_prev);
		$display ("     Real value = %b", out_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out_4_exp = out_4_expected_prev;
	end
	if (
		( out_5_expected_prev !== 1'bx ) && ( out_5_prev !== out_5_expected_prev )
		&& ((out_5_expected_prev !== last_out_5_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_5_expected_prev);
		$display ("     Real value = %b", out_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_5_exp = out_5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#600000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gA6_lab4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] hand_sum;
reg [5:0] new_card;
// wires                                               
wire ace_out;
wire legal_play;
wire [5:0] out_1;
wire [5:0] out_2;
wire [5:0] out_3;
wire out_4;
wire out_5;

wire sampler;                             

// assign statements (if any)                          
gA6_lab4 i1 (
// port map - connection between master ports and signals/registers   
	.ace_out(ace_out),
	.hand_sum(hand_sum),
	.legal_play(legal_play),
	.new_card(new_card),
	.out_1(out_1),
	.out_2(out_2),
	.out_3(out_3),
	.out_4(out_4),
	.out_5(out_5)
);
// new_card[ 5 ]
initial
begin
	new_card[5] = 1'b0;
end 
// new_card[ 4 ]
initial
begin
	new_card[4] = 1'b0;
end 
// new_card[ 3 ]
initial
begin
	new_card[3] = 1'b1;
	new_card[3] = #430000 1'b0;
end 
// new_card[ 2 ]
initial
begin
	new_card[2] = 1'b0;
	new_card[2] = #50000 1'b1;
	new_card[2] = #40000 1'b0;
	new_card[2] = #150000 1'b1;
	new_card[2] = #190000 1'b0;
end 
// new_card[ 1 ]
initial
begin
	new_card[1] = 1'b1;
	new_card[1] = #50000 1'b0;
	new_card[1] = #40000 1'b1;
	new_card[1] = #150000 1'b0;
end 
// new_card[ 0 ]
initial
begin
	new_card[0] = 1'b1;
	new_card[0] = #310000 1'b0;
	new_card[0] = #120000 1'b1;
	new_card[0] = #80000 1'b0;
end 
// hand_sum[ 5 ]
initial
begin
	hand_sum[5] = 1'b0;
end 
// hand_sum[ 4 ]
initial
begin
	hand_sum[4] = 1'b0;
	hand_sum[4] = #170000 1'b1;
	hand_sum[4] = #40000 1'b0;
	hand_sum[4] = #200000 1'b1;
	hand_sum[4] = #40000 1'b0;
	hand_sum[4] = #20000 1'b1;
	hand_sum[4] = #50000 1'b0;
	hand_sum[4] = #60000 1'b1;
end 
// hand_sum[ 3 ]
initial
begin
	hand_sum[3] = 1'b0;
	hand_sum[3] = #5000 1'b1;
	hand_sum[3] = #165000 1'b0;
	hand_sum[3] = #40000 1'b1;
	hand_sum[3] = #80000 1'b0;
	hand_sum[3] = #90000 1'b1;
	hand_sum[3] = #30000 1'b0;
	hand_sum[3] = #140000 1'b1;
	hand_sum[3] = #30000 1'b0;
end 
// hand_sum[ 2 ]
initial
begin
	hand_sum[2] = 1'b0;
	hand_sum[2] = #45000 1'b1;
	hand_sum[2] = #10000 1'b0;
	hand_sum[2] = #35000 1'b1;
	hand_sum[2] = #120000 1'b0;
	hand_sum[2] = #140000 1'b1;
	hand_sum[2] = #30000 1'b0;
	hand_sum[2] = #90000 1'b1;
	hand_sum[2] = #50000 1'b0;
	hand_sum[2] = #60000 1'b1;
end 
// hand_sum[ 1 ]
initial
begin
	hand_sum[1] = 1'b0;
	hand_sum[1] = #5000 1'b1;
	hand_sum[1] = #40000 1'b0;
	hand_sum[1] = #10000 1'b1;
	hand_sum[1] = #35000 1'b0;
	hand_sum[1] = #50000 1'b1;
	hand_sum[1] = #30000 1'b0;
	hand_sum[1] = #80000 1'b1;
	hand_sum[1] = #40000 1'b0;
	hand_sum[1] = #90000 1'b1;
	hand_sum[1] = #70000 1'b0;
	hand_sum[1] = #100000 1'b1;
end 
// hand_sum[ 0 ]
initial
begin
	hand_sum[0] = 1'b0;
	hand_sum[0] = #5000 1'b1;
	hand_sum[0] = #5000 1'b0;
	hand_sum[0] = #60000 1'b1;
	hand_sum[0] = #20000 1'b0;
	hand_sum[0] = #50000 1'b1;
	hand_sum[0] = #70000 1'b0;
	hand_sum[0] = #40000 1'b1;
	hand_sum[0] = #80000 1'b0;
	hand_sum[0] = #20000 1'b1;
	hand_sum[0] = #30000 1'b0;
	hand_sum[0] = #30000 1'b1;
	hand_sum[0] = #40000 1'b0;
	hand_sum[0] = #40000 1'b1;
	hand_sum[0] = #30000 1'b0;
	hand_sum[0] = #30000 1'b1;
	hand_sum[0] = #30000 1'b0;
end 

gA6_lab4_vlg_sample_tst tb_sample (
	.hand_sum(hand_sum),
	.new_card(new_card),
	.sampler_tx(sampler)
);

gA6_lab4_vlg_check_tst tb_out(
	.ace_out(ace_out),
	.legal_play(legal_play),
	.out_1(out_1),
	.out_2(out_2),
	.out_3(out_3),
	.out_4(out_4),
	.out_5(out_5),
	.sampler_rx(sampler)
);
endmodule

