// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2017 15:09:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gA6_lab4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gA6_lab4_vlg_sample_tst(
	clk,
	data,
	hand_sum,
	legal_num,
	mode,
	new_card,
	request_deal,
	rst,
	stack,
	sampler_tx
);
input  clk;
input [5:0] data;
input [5:0] hand_sum;
input  legal_num;
input [1:0] mode;
input [5:0] new_card;
input  request_deal;
input  rst;
input  stack;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data or hand_sum or legal_num or mode or new_card or request_deal or rst or stack)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gA6_lab4_vlg_check_tst (
	ace_out,
	addr,
	empty,
	full,
	led_empty,
	led_mode,
	led_suit,
	led_value,
	legal_play,
	num,
	rand_enable,
	stack_enable,
	sampler_rx
);
input  ace_out;
input [5:0] addr;
input  empty;
input  full;
input [6:0] led_empty;
input [6:0] led_mode;
input [6:0] led_suit;
input [6:0] led_value;
input  legal_play;
input [5:0] num;
input  rand_enable;
input  stack_enable;
input sampler_rx;

reg  ace_out_expected;
reg [5:0] addr_expected;
reg  empty_expected;
reg  full_expected;
reg [6:0] led_empty_expected;
reg [6:0] led_mode_expected;
reg [6:0] led_suit_expected;
reg [6:0] led_value_expected;
reg  legal_play_expected;
reg [5:0] num_expected;
reg  rand_enable_expected;
reg  stack_enable_expected;

reg  ace_out_prev;
reg [5:0] addr_prev;
reg  empty_prev;
reg  full_prev;
reg [6:0] led_empty_prev;
reg [6:0] led_mode_prev;
reg [6:0] led_suit_prev;
reg [6:0] led_value_prev;
reg  legal_play_prev;
reg [5:0] num_prev;
reg  rand_enable_prev;
reg  stack_enable_prev;

reg  ace_out_expected_prev;
reg  legal_play_expected_prev;

reg  last_ace_out_exp;
reg  last_legal_play_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	ace_out_prev = ace_out;
	addr_prev = addr;
	empty_prev = empty;
	full_prev = full;
	led_empty_prev = led_empty;
	led_mode_prev = led_mode;
	led_suit_prev = led_suit;
	led_value_prev = led_value;
	legal_play_prev = legal_play;
	num_prev = num;
	rand_enable_prev = rand_enable;
	stack_enable_prev = stack_enable;
end

// update expected /o prevs

always @(trigger)
begin
	ace_out_expected_prev = ace_out_expected;
	legal_play_expected_prev = legal_play_expected;
end



// expected legal_play
initial
begin
	legal_play_expected = 1'bX;
end 

// expected ace_out
initial
begin
	ace_out_expected = 1'bX;
end 
// generate trigger
always @(ace_out_expected or ace_out or addr_expected or addr or empty_expected or empty or full_expected or full or led_empty_expected or led_empty or led_mode_expected or led_mode or led_suit_expected or led_suit or led_value_expected or led_value or legal_play_expected or legal_play or num_expected or num or rand_enable_expected or rand_enable or stack_enable_expected or stack_enable)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ace_out = %b | expected addr = %b | expected empty = %b | expected full = %b | expected led_empty = %b | expected led_mode = %b | expected led_suit = %b | expected led_value = %b | expected legal_play = %b | expected num = %b | expected rand_enable = %b | expected stack_enable = %b | ",ace_out_expected_prev,addr_expected_prev,empty_expected_prev,full_expected_prev,led_empty_expected_prev,led_mode_expected_prev,led_suit_expected_prev,led_value_expected_prev,legal_play_expected_prev,num_expected_prev,rand_enable_expected_prev,stack_enable_expected_prev);
	$display("| real ace_out = %b | real addr = %b | real empty = %b | real full = %b | real led_empty = %b | real led_mode = %b | real led_suit = %b | real led_value = %b | real legal_play = %b | real num = %b | real rand_enable = %b | real stack_enable = %b | ",ace_out_prev,addr_prev,empty_prev,full_prev,led_empty_prev,led_mode_prev,led_suit_prev,led_value_prev,legal_play_prev,num_prev,rand_enable_prev,stack_enable_prev);
`endif
	if (
		( ace_out_expected_prev !== 1'bx ) && ( ace_out_prev !== ace_out_expected_prev )
		&& ((ace_out_expected_prev !== last_ace_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ace_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ace_out_expected_prev);
		$display ("     Real value = %b", ace_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ace_out_exp = ace_out_expected_prev;
	end
	if (
		( legal_play_expected_prev !== 1'bx ) && ( legal_play_prev !== legal_play_expected_prev )
		&& ((legal_play_expected_prev !== last_legal_play_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port legal_play :: @time = %t",  $realtime);
		$display ("     Expected value = %b", legal_play_expected_prev);
		$display ("     Real value = %b", legal_play_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_legal_play_exp = legal_play_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#600000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gA6_lab4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] data;
reg [5:0] hand_sum;
reg legal_num;
reg [1:0] mode;
reg [5:0] new_card;
reg request_deal;
reg rst;
reg stack;
// wires                                               
wire ace_out;
wire [5:0] addr;
wire empty;
wire full;
wire [6:0] led_empty;
wire [6:0] led_mode;
wire [6:0] led_suit;
wire [6:0] led_value;
wire legal_play;
wire [5:0] num;
wire rand_enable;
wire stack_enable;

wire sampler;                             

// assign statements (if any)                          
gA6_lab4 i1 (
// port map - connection between master ports and signals/registers   
	.ace_out(ace_out),
	.addr(addr),
	.clk(clk),
	.data(data),
	.empty(empty),
	.full(full),
	.hand_sum(hand_sum),
	.led_empty(led_empty),
	.led_mode(led_mode),
	.led_suit(led_suit),
	.led_value(led_value),
	.legal_num(legal_num),
	.legal_play(legal_play),
	.mode(mode),
	.new_card(new_card),
	.num(num),
	.rand_enable(rand_enable),
	.request_deal(request_deal),
	.rst(rst),
	.stack(stack),
	.stack_enable(stack_enable)
);
// new_card[ 5 ]
initial
begin
	new_card[5] = 1'b0;
end 
// new_card[ 4 ]
initial
begin
	new_card[4] = 1'b0;
end 
// new_card[ 3 ]
initial
begin
	new_card[3] = 1'b1;
	new_card[3] = #430000 1'b0;
end 
// new_card[ 2 ]
initial
begin
	new_card[2] = 1'b0;
	new_card[2] = #50000 1'b1;
	new_card[2] = #40000 1'b0;
	new_card[2] = #150000 1'b1;
	new_card[2] = #190000 1'b0;
end 
// new_card[ 1 ]
initial
begin
	new_card[1] = 1'b1;
	new_card[1] = #50000 1'b0;
	new_card[1] = #40000 1'b1;
	new_card[1] = #150000 1'b0;
end 
// new_card[ 0 ]
initial
begin
	new_card[0] = 1'b1;
	new_card[0] = #310000 1'b0;
	new_card[0] = #120000 1'b1;
	new_card[0] = #80000 1'b0;
end 
// hand_sum[ 5 ]
initial
begin
	hand_sum[5] = 1'b0;
end 
// hand_sum[ 4 ]
initial
begin
	hand_sum[4] = 1'b0;
	hand_sum[4] = #170000 1'b1;
	hand_sum[4] = #40000 1'b0;
	hand_sum[4] = #200000 1'b1;
	hand_sum[4] = #40000 1'b0;
	hand_sum[4] = #20000 1'b1;
	hand_sum[4] = #50000 1'b0;
	hand_sum[4] = #60000 1'b1;
end 
// hand_sum[ 3 ]
initial
begin
	hand_sum[3] = 1'b0;
	hand_sum[3] = #5000 1'b1;
	hand_sum[3] = #165000 1'b0;
	hand_sum[3] = #40000 1'b1;
	hand_sum[3] = #80000 1'b0;
	hand_sum[3] = #90000 1'b1;
	hand_sum[3] = #30000 1'b0;
	hand_sum[3] = #140000 1'b1;
	hand_sum[3] = #30000 1'b0;
end 
// hand_sum[ 2 ]
initial
begin
	hand_sum[2] = 1'b0;
	hand_sum[2] = #45000 1'b1;
	hand_sum[2] = #10000 1'b0;
	hand_sum[2] = #35000 1'b1;
	hand_sum[2] = #120000 1'b0;
	hand_sum[2] = #140000 1'b1;
	hand_sum[2] = #30000 1'b0;
	hand_sum[2] = #90000 1'b1;
	hand_sum[2] = #50000 1'b0;
	hand_sum[2] = #60000 1'b1;
end 
// hand_sum[ 1 ]
initial
begin
	hand_sum[1] = 1'b0;
	hand_sum[1] = #5000 1'b1;
	hand_sum[1] = #40000 1'b0;
	hand_sum[1] = #10000 1'b1;
	hand_sum[1] = #35000 1'b0;
	hand_sum[1] = #50000 1'b1;
	hand_sum[1] = #30000 1'b0;
	hand_sum[1] = #80000 1'b1;
	hand_sum[1] = #40000 1'b0;
	hand_sum[1] = #90000 1'b1;
	hand_sum[1] = #70000 1'b0;
	hand_sum[1] = #100000 1'b1;
end 
// hand_sum[ 0 ]
initial
begin
	hand_sum[0] = 1'b0;
	hand_sum[0] = #5000 1'b1;
	hand_sum[0] = #5000 1'b0;
	hand_sum[0] = #60000 1'b1;
	hand_sum[0] = #20000 1'b0;
	hand_sum[0] = #50000 1'b1;
	hand_sum[0] = #70000 1'b0;
	hand_sum[0] = #40000 1'b1;
	hand_sum[0] = #80000 1'b0;
	hand_sum[0] = #20000 1'b1;
	hand_sum[0] = #30000 1'b0;
	hand_sum[0] = #30000 1'b1;
	hand_sum[0] = #40000 1'b0;
	hand_sum[0] = #40000 1'b1;
	hand_sum[0] = #30000 1'b0;
	hand_sum[0] = #30000 1'b1;
	hand_sum[0] = #30000 1'b0;
end 

gA6_lab4_vlg_sample_tst tb_sample (
	.clk(clk),
	.data(data),
	.hand_sum(hand_sum),
	.legal_num(legal_num),
	.mode(mode),
	.new_card(new_card),
	.request_deal(request_deal),
	.rst(rst),
	.stack(stack),
	.sampler_tx(sampler)
);

gA6_lab4_vlg_check_tst tb_out(
	.ace_out(ace_out),
	.addr(addr),
	.empty(empty),
	.full(full),
	.led_empty(led_empty),
	.led_mode(led_mode),
	.led_suit(led_suit),
	.led_value(led_value),
	.legal_play(legal_play),
	.num(num),
	.rand_enable(rand_enable),
	.stack_enable(stack_enable),
	.sampler_rx(sampler)
);
endmodule

