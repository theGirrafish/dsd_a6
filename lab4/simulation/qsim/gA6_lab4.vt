// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2017 14:47:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gA6_lab4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gA6_lab4_vlg_sample_tst(
	clk,
	mode,
	request_deal,
	rst,
	stack,
	sampler_tx
);
input  clk;
input [1:0] mode;
input  request_deal;
input  rst;
input  stack;
output sampler_tx;

reg sample;
time current_time;
always @(clk or mode or request_deal or rst or stack)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gA6_lab4_vlg_check_tst (
	addr,
	empty,
	full,
	led_empty,
	led_mode,
	led_suit,
	led_value,
	num,
	sampler_rx
);
input [5:0] addr;
input  empty;
input  full;
input [6:0] led_empty;
input [6:0] led_mode;
input [6:0] led_suit;
input [6:0] led_value;
input [5:0] num;
input sampler_rx;

reg [5:0] addr_expected;
reg  empty_expected;
reg  full_expected;
reg [6:0] led_empty_expected;
reg [6:0] led_mode_expected;
reg [6:0] led_suit_expected;
reg [6:0] led_value_expected;
reg [5:0] num_expected;

reg [5:0] addr_prev;
reg  empty_prev;
reg  full_prev;
reg [6:0] led_empty_prev;
reg [6:0] led_mode_prev;
reg [6:0] led_suit_prev;
reg [6:0] led_value_prev;
reg [5:0] num_prev;

reg [5:0] addr_expected_prev;
reg  empty_expected_prev;
reg  full_expected_prev;
reg [6:0] led_empty_expected_prev;
reg [6:0] led_mode_expected_prev;
reg [6:0] led_suit_expected_prev;
reg [6:0] led_value_expected_prev;
reg [5:0] num_expected_prev;

reg [5:0] last_addr_exp;
reg  last_empty_exp;
reg  last_full_exp;
reg [6:0] last_led_empty_exp;
reg [6:0] last_led_mode_exp;
reg [6:0] last_led_suit_exp;
reg [6:0] last_led_value_exp;
reg [5:0] last_num_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	addr_prev = addr;
	empty_prev = empty;
	full_prev = full;
	led_empty_prev = led_empty;
	led_mode_prev = led_mode;
	led_suit_prev = led_suit;
	led_value_prev = led_value;
	num_prev = num;
end

// update expected /o prevs

always @(trigger)
begin
	addr_expected_prev = addr_expected;
	empty_expected_prev = empty_expected;
	full_expected_prev = full_expected;
	led_empty_expected_prev = led_empty_expected;
	led_mode_expected_prev = led_mode_expected;
	led_suit_expected_prev = led_suit_expected;
	led_value_expected_prev = led_value_expected;
	num_expected_prev = num_expected;
end


// expected num[ 5 ]
initial
begin
	num_expected[5] = 1'bX;
end 
// expected num[ 4 ]
initial
begin
	num_expected[4] = 1'bX;
end 
// expected num[ 3 ]
initial
begin
	num_expected[3] = 1'bX;
end 
// expected num[ 2 ]
initial
begin
	num_expected[2] = 1'bX;
end 
// expected num[ 1 ]
initial
begin
	num_expected[1] = 1'bX;
end 
// expected num[ 0 ]
initial
begin
	num_expected[0] = 1'bX;
end 
// expected led_value[ 6 ]
initial
begin
	led_value_expected[6] = 1'bX;
end 
// expected led_value[ 5 ]
initial
begin
	led_value_expected[5] = 1'bX;
end 
// expected led_value[ 4 ]
initial
begin
	led_value_expected[4] = 1'bX;
end 
// expected led_value[ 3 ]
initial
begin
	led_value_expected[3] = 1'bX;
end 
// expected led_value[ 2 ]
initial
begin
	led_value_expected[2] = 1'bX;
end 
// expected led_value[ 1 ]
initial
begin
	led_value_expected[1] = 1'bX;
end 
// expected led_value[ 0 ]
initial
begin
	led_value_expected[0] = 1'bX;
end 
// expected led_suit[ 6 ]
initial
begin
	led_suit_expected[6] = 1'bX;
end 
// expected led_suit[ 5 ]
initial
begin
	led_suit_expected[5] = 1'bX;
end 
// expected led_suit[ 4 ]
initial
begin
	led_suit_expected[4] = 1'bX;
end 
// expected led_suit[ 3 ]
initial
begin
	led_suit_expected[3] = 1'bX;
end 
// expected led_suit[ 2 ]
initial
begin
	led_suit_expected[2] = 1'bX;
end 
// expected led_suit[ 1 ]
initial
begin
	led_suit_expected[1] = 1'bX;
end 
// expected led_suit[ 0 ]
initial
begin
	led_suit_expected[0] = 1'bX;
end 
// expected led_mode[ 6 ]
initial
begin
	led_mode_expected[6] = 1'bX;
end 
// expected led_mode[ 5 ]
initial
begin
	led_mode_expected[5] = 1'bX;
end 
// expected led_mode[ 4 ]
initial
begin
	led_mode_expected[4] = 1'bX;
end 
// expected led_mode[ 3 ]
initial
begin
	led_mode_expected[3] = 1'bX;
end 
// expected led_mode[ 2 ]
initial
begin
	led_mode_expected[2] = 1'bX;
end 
// expected led_mode[ 1 ]
initial
begin
	led_mode_expected[1] = 1'bX;
end 
// expected led_mode[ 0 ]
initial
begin
	led_mode_expected[0] = 1'bX;
end 
// expected led_empty[ 6 ]
initial
begin
	led_empty_expected[6] = 1'bX;
end 
// expected led_empty[ 5 ]
initial
begin
	led_empty_expected[5] = 1'bX;
end 
// expected led_empty[ 4 ]
initial
begin
	led_empty_expected[4] = 1'bX;
end 
// expected led_empty[ 3 ]
initial
begin
	led_empty_expected[3] = 1'bX;
end 
// expected led_empty[ 2 ]
initial
begin
	led_empty_expected[2] = 1'bX;
end 
// expected led_empty[ 1 ]
initial
begin
	led_empty_expected[1] = 1'bX;
end 
// expected led_empty[ 0 ]
initial
begin
	led_empty_expected[0] = 1'bX;
end 

// expected full
initial
begin
	full_expected = 1'bX;
end 

// expected empty
initial
begin
	empty_expected = 1'bX;
end 
// expected addr[ 5 ]
initial
begin
	addr_expected[5] = 1'bX;
end 
// expected addr[ 4 ]
initial
begin
	addr_expected[4] = 1'bX;
end 
// expected addr[ 3 ]
initial
begin
	addr_expected[3] = 1'bX;
end 
// expected addr[ 2 ]
initial
begin
	addr_expected[2] = 1'bX;
end 
// expected addr[ 1 ]
initial
begin
	addr_expected[1] = 1'bX;
end 
// expected addr[ 0 ]
initial
begin
	addr_expected[0] = 1'bX;
end 
// generate trigger
always @(addr_expected or addr or empty_expected or empty or full_expected or full or led_empty_expected or led_empty or led_mode_expected or led_mode or led_suit_expected or led_suit or led_value_expected or led_value or num_expected or num)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addr = %b | expected empty = %b | expected full = %b | expected led_empty = %b | expected led_mode = %b | expected led_suit = %b | expected led_value = %b | expected num = %b | ",addr_expected_prev,empty_expected_prev,full_expected_prev,led_empty_expected_prev,led_mode_expected_prev,led_suit_expected_prev,led_value_expected_prev,num_expected_prev);
	$display("| real addr = %b | real empty = %b | real full = %b | real led_empty = %b | real led_mode = %b | real led_suit = %b | real led_value = %b | real num = %b | ",addr_prev,empty_prev,full_prev,led_empty_prev,led_mode_prev,led_suit_prev,led_value_prev,num_prev);
`endif
	if (
		( addr_expected_prev[0] !== 1'bx ) && ( addr_prev[0] !== addr_expected_prev[0] )
		&& ((addr_expected_prev[0] !== last_addr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[0] = addr_expected_prev[0];
	end
	if (
		( addr_expected_prev[1] !== 1'bx ) && ( addr_prev[1] !== addr_expected_prev[1] )
		&& ((addr_expected_prev[1] !== last_addr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[1] = addr_expected_prev[1];
	end
	if (
		( addr_expected_prev[2] !== 1'bx ) && ( addr_prev[2] !== addr_expected_prev[2] )
		&& ((addr_expected_prev[2] !== last_addr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[2] = addr_expected_prev[2];
	end
	if (
		( addr_expected_prev[3] !== 1'bx ) && ( addr_prev[3] !== addr_expected_prev[3] )
		&& ((addr_expected_prev[3] !== last_addr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[3] = addr_expected_prev[3];
	end
	if (
		( addr_expected_prev[4] !== 1'bx ) && ( addr_prev[4] !== addr_expected_prev[4] )
		&& ((addr_expected_prev[4] !== last_addr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[4] = addr_expected_prev[4];
	end
	if (
		( addr_expected_prev[5] !== 1'bx ) && ( addr_prev[5] !== addr_expected_prev[5] )
		&& ((addr_expected_prev[5] !== last_addr_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[5] = addr_expected_prev[5];
	end
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_full_exp = full_expected_prev;
	end
	if (
		( led_empty_expected_prev[0] !== 1'bx ) && ( led_empty_prev[0] !== led_empty_expected_prev[0] )
		&& ((led_empty_expected_prev[0] !== last_led_empty_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_empty[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_empty_expected_prev);
		$display ("     Real value = %b", led_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_empty_exp[0] = led_empty_expected_prev[0];
	end
	if (
		( led_empty_expected_prev[1] !== 1'bx ) && ( led_empty_prev[1] !== led_empty_expected_prev[1] )
		&& ((led_empty_expected_prev[1] !== last_led_empty_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_empty[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_empty_expected_prev);
		$display ("     Real value = %b", led_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_empty_exp[1] = led_empty_expected_prev[1];
	end
	if (
		( led_empty_expected_prev[2] !== 1'bx ) && ( led_empty_prev[2] !== led_empty_expected_prev[2] )
		&& ((led_empty_expected_prev[2] !== last_led_empty_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_empty[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_empty_expected_prev);
		$display ("     Real value = %b", led_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_empty_exp[2] = led_empty_expected_prev[2];
	end
	if (
		( led_empty_expected_prev[3] !== 1'bx ) && ( led_empty_prev[3] !== led_empty_expected_prev[3] )
		&& ((led_empty_expected_prev[3] !== last_led_empty_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_empty[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_empty_expected_prev);
		$display ("     Real value = %b", led_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_empty_exp[3] = led_empty_expected_prev[3];
	end
	if (
		( led_empty_expected_prev[4] !== 1'bx ) && ( led_empty_prev[4] !== led_empty_expected_prev[4] )
		&& ((led_empty_expected_prev[4] !== last_led_empty_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_empty[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_empty_expected_prev);
		$display ("     Real value = %b", led_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_empty_exp[4] = led_empty_expected_prev[4];
	end
	if (
		( led_empty_expected_prev[5] !== 1'bx ) && ( led_empty_prev[5] !== led_empty_expected_prev[5] )
		&& ((led_empty_expected_prev[5] !== last_led_empty_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_empty[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_empty_expected_prev);
		$display ("     Real value = %b", led_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_empty_exp[5] = led_empty_expected_prev[5];
	end
	if (
		( led_empty_expected_prev[6] !== 1'bx ) && ( led_empty_prev[6] !== led_empty_expected_prev[6] )
		&& ((led_empty_expected_prev[6] !== last_led_empty_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_empty[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_empty_expected_prev);
		$display ("     Real value = %b", led_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_empty_exp[6] = led_empty_expected_prev[6];
	end
	if (
		( led_mode_expected_prev[0] !== 1'bx ) && ( led_mode_prev[0] !== led_mode_expected_prev[0] )
		&& ((led_mode_expected_prev[0] !== last_led_mode_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_mode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_mode_expected_prev);
		$display ("     Real value = %b", led_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_mode_exp[0] = led_mode_expected_prev[0];
	end
	if (
		( led_mode_expected_prev[1] !== 1'bx ) && ( led_mode_prev[1] !== led_mode_expected_prev[1] )
		&& ((led_mode_expected_prev[1] !== last_led_mode_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_mode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_mode_expected_prev);
		$display ("     Real value = %b", led_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_mode_exp[1] = led_mode_expected_prev[1];
	end
	if (
		( led_mode_expected_prev[2] !== 1'bx ) && ( led_mode_prev[2] !== led_mode_expected_prev[2] )
		&& ((led_mode_expected_prev[2] !== last_led_mode_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_mode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_mode_expected_prev);
		$display ("     Real value = %b", led_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_mode_exp[2] = led_mode_expected_prev[2];
	end
	if (
		( led_mode_expected_prev[3] !== 1'bx ) && ( led_mode_prev[3] !== led_mode_expected_prev[3] )
		&& ((led_mode_expected_prev[3] !== last_led_mode_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_mode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_mode_expected_prev);
		$display ("     Real value = %b", led_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_mode_exp[3] = led_mode_expected_prev[3];
	end
	if (
		( led_mode_expected_prev[4] !== 1'bx ) && ( led_mode_prev[4] !== led_mode_expected_prev[4] )
		&& ((led_mode_expected_prev[4] !== last_led_mode_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_mode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_mode_expected_prev);
		$display ("     Real value = %b", led_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_mode_exp[4] = led_mode_expected_prev[4];
	end
	if (
		( led_mode_expected_prev[5] !== 1'bx ) && ( led_mode_prev[5] !== led_mode_expected_prev[5] )
		&& ((led_mode_expected_prev[5] !== last_led_mode_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_mode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_mode_expected_prev);
		$display ("     Real value = %b", led_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_mode_exp[5] = led_mode_expected_prev[5];
	end
	if (
		( led_mode_expected_prev[6] !== 1'bx ) && ( led_mode_prev[6] !== led_mode_expected_prev[6] )
		&& ((led_mode_expected_prev[6] !== last_led_mode_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_mode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_mode_expected_prev);
		$display ("     Real value = %b", led_mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_mode_exp[6] = led_mode_expected_prev[6];
	end
	if (
		( led_suit_expected_prev[0] !== 1'bx ) && ( led_suit_prev[0] !== led_suit_expected_prev[0] )
		&& ((led_suit_expected_prev[0] !== last_led_suit_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_suit[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_suit_expected_prev);
		$display ("     Real value = %b", led_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_suit_exp[0] = led_suit_expected_prev[0];
	end
	if (
		( led_suit_expected_prev[1] !== 1'bx ) && ( led_suit_prev[1] !== led_suit_expected_prev[1] )
		&& ((led_suit_expected_prev[1] !== last_led_suit_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_suit[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_suit_expected_prev);
		$display ("     Real value = %b", led_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_suit_exp[1] = led_suit_expected_prev[1];
	end
	if (
		( led_suit_expected_prev[2] !== 1'bx ) && ( led_suit_prev[2] !== led_suit_expected_prev[2] )
		&& ((led_suit_expected_prev[2] !== last_led_suit_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_suit[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_suit_expected_prev);
		$display ("     Real value = %b", led_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_suit_exp[2] = led_suit_expected_prev[2];
	end
	if (
		( led_suit_expected_prev[3] !== 1'bx ) && ( led_suit_prev[3] !== led_suit_expected_prev[3] )
		&& ((led_suit_expected_prev[3] !== last_led_suit_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_suit[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_suit_expected_prev);
		$display ("     Real value = %b", led_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_suit_exp[3] = led_suit_expected_prev[3];
	end
	if (
		( led_suit_expected_prev[4] !== 1'bx ) && ( led_suit_prev[4] !== led_suit_expected_prev[4] )
		&& ((led_suit_expected_prev[4] !== last_led_suit_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_suit[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_suit_expected_prev);
		$display ("     Real value = %b", led_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_suit_exp[4] = led_suit_expected_prev[4];
	end
	if (
		( led_suit_expected_prev[5] !== 1'bx ) && ( led_suit_prev[5] !== led_suit_expected_prev[5] )
		&& ((led_suit_expected_prev[5] !== last_led_suit_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_suit[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_suit_expected_prev);
		$display ("     Real value = %b", led_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_suit_exp[5] = led_suit_expected_prev[5];
	end
	if (
		( led_suit_expected_prev[6] !== 1'bx ) && ( led_suit_prev[6] !== led_suit_expected_prev[6] )
		&& ((led_suit_expected_prev[6] !== last_led_suit_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_suit[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_suit_expected_prev);
		$display ("     Real value = %b", led_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_suit_exp[6] = led_suit_expected_prev[6];
	end
	if (
		( led_value_expected_prev[0] !== 1'bx ) && ( led_value_prev[0] !== led_value_expected_prev[0] )
		&& ((led_value_expected_prev[0] !== last_led_value_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_value_expected_prev);
		$display ("     Real value = %b", led_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_value_exp[0] = led_value_expected_prev[0];
	end
	if (
		( led_value_expected_prev[1] !== 1'bx ) && ( led_value_prev[1] !== led_value_expected_prev[1] )
		&& ((led_value_expected_prev[1] !== last_led_value_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_value_expected_prev);
		$display ("     Real value = %b", led_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_value_exp[1] = led_value_expected_prev[1];
	end
	if (
		( led_value_expected_prev[2] !== 1'bx ) && ( led_value_prev[2] !== led_value_expected_prev[2] )
		&& ((led_value_expected_prev[2] !== last_led_value_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_value_expected_prev);
		$display ("     Real value = %b", led_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_value_exp[2] = led_value_expected_prev[2];
	end
	if (
		( led_value_expected_prev[3] !== 1'bx ) && ( led_value_prev[3] !== led_value_expected_prev[3] )
		&& ((led_value_expected_prev[3] !== last_led_value_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_value_expected_prev);
		$display ("     Real value = %b", led_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_value_exp[3] = led_value_expected_prev[3];
	end
	if (
		( led_value_expected_prev[4] !== 1'bx ) && ( led_value_prev[4] !== led_value_expected_prev[4] )
		&& ((led_value_expected_prev[4] !== last_led_value_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_value_expected_prev);
		$display ("     Real value = %b", led_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_value_exp[4] = led_value_expected_prev[4];
	end
	if (
		( led_value_expected_prev[5] !== 1'bx ) && ( led_value_prev[5] !== led_value_expected_prev[5] )
		&& ((led_value_expected_prev[5] !== last_led_value_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_value_expected_prev);
		$display ("     Real value = %b", led_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_value_exp[5] = led_value_expected_prev[5];
	end
	if (
		( led_value_expected_prev[6] !== 1'bx ) && ( led_value_prev[6] !== led_value_expected_prev[6] )
		&& ((led_value_expected_prev[6] !== last_led_value_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_value_expected_prev);
		$display ("     Real value = %b", led_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_value_exp[6] = led_value_expected_prev[6];
	end
	if (
		( num_expected_prev[0] !== 1'bx ) && ( num_prev[0] !== num_expected_prev[0] )
		&& ((num_expected_prev[0] !== last_num_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_num_exp[0] = num_expected_prev[0];
	end
	if (
		( num_expected_prev[1] !== 1'bx ) && ( num_prev[1] !== num_expected_prev[1] )
		&& ((num_expected_prev[1] !== last_num_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_num_exp[1] = num_expected_prev[1];
	end
	if (
		( num_expected_prev[2] !== 1'bx ) && ( num_prev[2] !== num_expected_prev[2] )
		&& ((num_expected_prev[2] !== last_num_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_num_exp[2] = num_expected_prev[2];
	end
	if (
		( num_expected_prev[3] !== 1'bx ) && ( num_prev[3] !== num_expected_prev[3] )
		&& ((num_expected_prev[3] !== last_num_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_num_exp[3] = num_expected_prev[3];
	end
	if (
		( num_expected_prev[4] !== 1'bx ) && ( num_prev[4] !== num_expected_prev[4] )
		&& ((num_expected_prev[4] !== last_num_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_num_exp[4] = num_expected_prev[4];
	end
	if (
		( num_expected_prev[5] !== 1'bx ) && ( num_prev[5] !== num_expected_prev[5] )
		&& ((num_expected_prev[5] !== last_num_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_num_exp[5] = num_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gA6_lab4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] mode;
reg request_deal;
reg rst;
reg stack;
// wires                                               
wire [5:0] addr;
wire empty;
wire full;
wire [6:0] led_empty;
wire [6:0] led_mode;
wire [6:0] led_suit;
wire [6:0] led_value;
wire [5:0] num;

wire sampler;                             

// assign statements (if any)                          
gA6_lab4 i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clk(clk),
	.empty(empty),
	.full(full),
	.led_empty(led_empty),
	.led_mode(led_mode),
	.led_suit(led_suit),
	.led_value(led_value),
	.mode(mode),
	.num(num),
	.request_deal(request_deal),
	.rst(rst),
	.stack(stack)
);

// clk
initial
begin
	clk = 1'b0;
end 
// mode[ 1 ]
initial
begin
	mode[1] = 1'b1;
end 
// mode[ 0 ]
initial
begin
	mode[0] = 1'b1;
end 

// request_deal
initial
begin
	request_deal = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// stack
initial
begin
	stack = 1'b0;
end 

gA6_lab4_vlg_sample_tst tb_sample (
	.clk(clk),
	.mode(mode),
	.request_deal(request_deal),
	.rst(rst),
	.stack(stack),
	.sampler_tx(sampler)
);

gA6_lab4_vlg_check_tst tb_out(
	.addr(addr),
	.empty(empty),
	.full(full),
	.led_empty(led_empty),
	.led_mode(led_mode),
	.led_suit(led_suit),
	.led_value(led_value),
	.num(num),
	.sampler_rx(sampler)
);
endmodule

