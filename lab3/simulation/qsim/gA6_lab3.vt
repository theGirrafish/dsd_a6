// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2017 23:06:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gA6_lab3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gA6_lab3_vlg_sample_tst(
	addr,
	clk,
	data,
	enable,
	mode,
	rst,
	sampler_tx
);
input [5:0] addr;
input  clk;
input [5:0] data;
input  enable;
input [1:0] mode;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(addr or clk or data or enable or mode or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gA6_lab3_vlg_check_tst (
	empty,
	full,
	num,
	value,
	sampler_rx
);
input  empty;
input  full;
input [5:0] num;
input [5:0] value;
input sampler_rx;

reg  empty_expected;
reg  full_expected;
reg [5:0] num_expected;
reg [5:0] value_expected;

reg  empty_prev;
reg  full_prev;
reg [5:0] num_prev;
reg [5:0] value_prev;

reg  empty_expected_prev;
reg  full_expected_prev;
reg [5:0] num_expected_prev;
reg [5:0] value_expected_prev;

reg  last_empty_exp;
reg  last_full_exp;
reg [5:0] last_num_exp;
reg [5:0] last_value_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	empty_prev = empty;
	full_prev = full;
	num_prev = num;
	value_prev = value;
end

// update expected /o prevs

always @(trigger)
begin
	empty_expected_prev = empty_expected;
	full_expected_prev = full_expected;
	num_expected_prev = num_expected;
	value_expected_prev = value_expected;
end


// expected num[ 5 ]
initial
begin
	num_expected[5] = 1'bX;
end 
// expected num[ 4 ]
initial
begin
	num_expected[4] = 1'bX;
end 
// expected num[ 3 ]
initial
begin
	num_expected[3] = 1'bX;
end 
// expected num[ 2 ]
initial
begin
	num_expected[2] = 1'bX;
end 
// expected num[ 1 ]
initial
begin
	num_expected[1] = 1'bX;
end 
// expected num[ 0 ]
initial
begin
	num_expected[0] = 1'bX;
end 
// expected value[ 5 ]
initial
begin
	value_expected[5] = 1'bX;
end 
// expected value[ 4 ]
initial
begin
	value_expected[4] = 1'bX;
end 
// expected value[ 3 ]
initial
begin
	value_expected[3] = 1'bX;
end 
// expected value[ 2 ]
initial
begin
	value_expected[2] = 1'bX;
end 
// expected value[ 1 ]
initial
begin
	value_expected[1] = 1'bX;
end 
// expected value[ 0 ]
initial
begin
	value_expected[0] = 1'bX;
end 

// expected full
initial
begin
	full_expected = 1'bX;
end 

// expected empty
initial
begin
	empty_expected = 1'bX;
end 
// generate trigger
always @(empty_expected or empty or full_expected or full or num_expected or num or value_expected or value)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected empty = %b | expected full = %b | expected num = %b | expected value = %b | ",empty_expected_prev,full_expected_prev,num_expected_prev,value_expected_prev);
	$display("| real empty = %b | real full = %b | real num = %b | real value = %b | ",empty_prev,full_prev,num_prev,value_prev);
`endif
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_full_exp = full_expected_prev;
	end
	if (
		( num_expected_prev[0] !== 1'bx ) && ( num_prev[0] !== num_expected_prev[0] )
		&& ((num_expected_prev[0] !== last_num_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[0] = num_expected_prev[0];
	end
	if (
		( num_expected_prev[1] !== 1'bx ) && ( num_prev[1] !== num_expected_prev[1] )
		&& ((num_expected_prev[1] !== last_num_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[1] = num_expected_prev[1];
	end
	if (
		( num_expected_prev[2] !== 1'bx ) && ( num_prev[2] !== num_expected_prev[2] )
		&& ((num_expected_prev[2] !== last_num_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[2] = num_expected_prev[2];
	end
	if (
		( num_expected_prev[3] !== 1'bx ) && ( num_prev[3] !== num_expected_prev[3] )
		&& ((num_expected_prev[3] !== last_num_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[3] = num_expected_prev[3];
	end
	if (
		( num_expected_prev[4] !== 1'bx ) && ( num_prev[4] !== num_expected_prev[4] )
		&& ((num_expected_prev[4] !== last_num_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[4] = num_expected_prev[4];
	end
	if (
		( num_expected_prev[5] !== 1'bx ) && ( num_prev[5] !== num_expected_prev[5] )
		&& ((num_expected_prev[5] !== last_num_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[5] = num_expected_prev[5];
	end
	if (
		( value_expected_prev[0] !== 1'bx ) && ( value_prev[0] !== value_expected_prev[0] )
		&& ((value_expected_prev[0] !== last_value_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[0] = value_expected_prev[0];
	end
	if (
		( value_expected_prev[1] !== 1'bx ) && ( value_prev[1] !== value_expected_prev[1] )
		&& ((value_expected_prev[1] !== last_value_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[1] = value_expected_prev[1];
	end
	if (
		( value_expected_prev[2] !== 1'bx ) && ( value_prev[2] !== value_expected_prev[2] )
		&& ((value_expected_prev[2] !== last_value_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[2] = value_expected_prev[2];
	end
	if (
		( value_expected_prev[3] !== 1'bx ) && ( value_prev[3] !== value_expected_prev[3] )
		&& ((value_expected_prev[3] !== last_value_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[3] = value_expected_prev[3];
	end
	if (
		( value_expected_prev[4] !== 1'bx ) && ( value_prev[4] !== value_expected_prev[4] )
		&& ((value_expected_prev[4] !== last_value_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[4] = value_expected_prev[4];
	end
	if (
		( value_expected_prev[5] !== 1'bx ) && ( value_prev[5] !== value_expected_prev[5] )
		&& ((value_expected_prev[5] !== last_value_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value_exp[5] = value_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gA6_lab3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] addr;
reg clk;
reg [5:0] data;
reg enable;
reg [1:0] mode;
reg rst;
// wires                                               
wire empty;
wire full;
wire [5:0] num;
wire [5:0] value;

wire sampler;                             

// assign statements (if any)                          
gA6_lab3 i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clk(clk),
	.data(data),
	.empty(empty),
	.enable(enable),
	.full(full),
	.mode(mode),
	.num(num),
	.rst(rst),
	.value(value)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #300000 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b1;
	data[2] = #300000 1'b0;
	data[2] = #400000 1'b1;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	# 100000;
	repeat(2)
	begin
		data[1] = 1'b1;
		data[1] = #200000 1'b0;
		# 200000;
	end
	data[1] = 1'b1;
end 
// data[ 0 ]
always
begin
	data[0] = 1'b1;
	data[0] = #100000 1'b0;
	#100000;
end 
// addr[ 5 ]
initial
begin
	addr[5] = 1'b0;
end 
// addr[ 4 ]
initial
begin
	addr[4] = 1'b0;
end 
// addr[ 3 ]
initial
begin
	addr[3] = 1'b0;
end 
// addr[ 2 ]
initial
begin
	addr[2] = 1'b0;
end 
// addr[ 1 ]
initial
begin
	addr[1] = 1'b0;
end 
// addr[ 0 ]
initial
begin
	addr[0] = 1'b0;
end 
// mode[ 1 ]
initial
begin
	mode[1] = 1'b1;
end 
// mode[ 0 ]
initial
begin
	mode[0] = 1'b0;
end 

// enable
always
begin
	enable = 1'b0;
	enable = #250000 1'b1;
	#250000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

gA6_lab3_vlg_sample_tst tb_sample (
	.addr(addr),
	.clk(clk),
	.data(data),
	.enable(enable),
	.mode(mode),
	.rst(rst),
	.sampler_tx(sampler)
);

gA6_lab3_vlg_check_tst tb_out(
	.empty(empty),
	.full(full),
	.num(num),
	.value(value),
	.sampler_rx(sampler)
);
endmodule

